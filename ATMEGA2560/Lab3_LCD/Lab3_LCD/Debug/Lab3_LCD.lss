
Lab3_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  0000063a  000006ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000063a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019f5  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001049  00000000  00000000  00002225  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aaf  00000000  00000000  0000326e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  00003d20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000777  00000000  00000000  00003f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a73  00000000  00000000  000046d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  0000514a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e3       	ldi	r30, 0x3A	; 58
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 31       	cpi	r26, 0x12	; 18
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	09 d2       	rcall	.+1042   	; 0x522 <main>
 110:	92 c2       	rjmp	.+1316   	; 0x636 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <init_adc>:
#define ADCEN 7
//#define ADSC 6

void init_adc(){
	// Choose adc1
	ADMUX = 0b01000001;
 114:	81 e4       	ldi	r24, 0x41	; 65
 116:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	// Enable adc by setting bit 7 in ADCSRA reg
	ADCSRA |= (1 << ADCEN);
 11a:	ea e7       	ldi	r30, 0x7A	; 122
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 68       	ori	r24, 0x80	; 128
 122:	80 83       	st	Z, r24
	ADCSRB = 0;
 124:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
 128:	08 95       	ret

0000012a <adc_read_single>:
}

// First conversion takes 25 clock cycles, subsequent 13
int adc_read_single(){
	ADCSRA |= (1 << ADSC);
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 64       	ori	r24, 0x40	; 64
 132:	80 83       	st	Z, r24
	while ((ADCSRA >> ADSC) & 1){};
 134:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 138:	86 fd       	sbrc	r24, 6
 13a:	fc cf       	rjmp	.-8      	; 0x134 <adc_read_single+0xa>
	int val = ADCW;
 13c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 140:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	//int val = ADCL;
	//val |= ADCH;
	return val;
}
 144:	08 95       	ret

00000146 <pulse_E>:
  _delay_ms(1);
}

// Moves the cursor to the left
void LCDCursorLeft()
{
 146:	e2 e0       	ldi	r30, 0x02	; 2
 148:	f1 e0       	ldi	r31, 0x01	; 1
 14a:	80 81       	ld	r24, Z
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	80 83       	st	Z, r24
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <pulse_E+0x14>
 156:	00 00       	nop
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	84 36       	cpi	r24, 0x64	; 100
 15c:	91 05       	cpc	r25, r1
 15e:	dc f3       	brlt	.-10     	; 0x156 <pulse_E+0x10>
 160:	e2 e0       	ldi	r30, 0x02	; 2
 162:	f1 e0       	ldi	r31, 0x01	; 1
 164:	80 81       	ld	r24, Z
 166:	8f 7b       	andi	r24, 0xBF	; 191
 168:	80 83       	st	Z, r24
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <pulse_E+0x2e>
 170:	00 00       	nop
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	84 36       	cpi	r24, 0x64	; 100
 176:	91 05       	cpc	r25, r1
 178:	dc f3       	brlt	.-10     	; 0x170 <pulse_E+0x2a>
 17a:	08 95       	ret

0000017c <set4DataPins>:
 17c:	e2 e0       	ldi	r30, 0x02	; 2
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	40 81       	ld	r20, Z
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	9c 01       	movw	r18, r24
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	34 2f       	mov	r19, r20
 18c:	37 7e       	andi	r19, 0xE7	; 231
 18e:	28 71       	andi	r18, 0x18	; 24
 190:	23 2b       	or	r18, r19
 192:	20 83       	st	Z, r18
 194:	4e b1       	in	r20, 0x0e	; 14
 196:	9c 01       	movw	r18, r24
 198:	22 0f       	add	r18, r18
 19a:	33 1f       	adc	r19, r19
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	34 2f       	mov	r19, r20
 1a2:	37 7f       	andi	r19, 0xF7	; 247
 1a4:	28 70       	andi	r18, 0x08	; 8
 1a6:	23 2b       	or	r18, r19
 1a8:	2e b9       	out	0x0e, r18	; 14
 1aa:	24 b3       	in	r18, 0x14	; 20
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	82 95       	swap	r24
 1b2:	92 95       	swap	r25
 1b4:	90 7f       	andi	r25, 0xF0	; 240
 1b6:	98 27       	eor	r25, r24
 1b8:	80 7f       	andi	r24, 0xF0	; 240
 1ba:	98 27       	eor	r25, r24
 1bc:	92 2f       	mov	r25, r18
 1be:	9f 7d       	andi	r25, 0xDF	; 223
 1c0:	80 72       	andi	r24, 0x20	; 32
 1c2:	89 2b       	or	r24, r25
 1c4:	84 bb       	out	0x14, r24	; 20
 1c6:	08 95       	ret

000001c8 <sendData>:
 1c8:	cf 93       	push	r28
 1ca:	c8 2f       	mov	r28, r24
 1cc:	e2 e0       	ldi	r30, 0x02	; 2
 1ce:	f1 e0       	ldi	r31, 0x01	; 1
 1d0:	80 81       	ld	r24, Z
 1d2:	80 62       	ori	r24, 0x20	; 32
 1d4:	80 83       	st	Z, r24
 1d6:	00 00       	nop
 1d8:	8c 2f       	mov	r24, r28
 1da:	82 95       	swap	r24
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	ce df       	rcall	.-100    	; 0x17c <set4DataPins>
 1e0:	00 00       	nop
 1e2:	b1 df       	rcall	.-158    	; 0x146 <pulse_E>
 1e4:	8c 2f       	mov	r24, r28
 1e6:	ca df       	rcall	.-108    	; 0x17c <set4DataPins>
 1e8:	00 00       	nop
 1ea:	ad df       	rcall	.-166    	; 0x146 <pulse_E>
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <sendInstruction>:
 1f0:	cf 93       	push	r28
 1f2:	c8 2f       	mov	r28, r24
 1f4:	e2 e0       	ldi	r30, 0x02	; 2
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	80 81       	ld	r24, Z
 1fa:	8f 7d       	andi	r24, 0xDF	; 223
 1fc:	80 83       	st	Z, r24
 1fe:	00 00       	nop
 200:	00 00       	nop
 202:	8c 2f       	mov	r24, r28
 204:	82 95       	swap	r24
 206:	8f 70       	andi	r24, 0x0F	; 15
 208:	b9 df       	rcall	.-142    	; 0x17c <set4DataPins>
 20a:	00 00       	nop
 20c:	00 00       	nop
 20e:	9b df       	rcall	.-202    	; 0x146 <pulse_E>
 210:	00 00       	nop
 212:	00 00       	nop
 214:	8c 2f       	mov	r24, r28
 216:	b2 df       	rcall	.-156    	; 0x17c <set4DataPins>
 218:	00 00       	nop
 21a:	00 00       	nop
 21c:	94 df       	rcall	.-216    	; 0x146 <pulse_E>
 21e:	8f e9       	ldi	r24, 0x9F	; 159
 220:	9f e0       	ldi	r25, 0x0F	; 15
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <sendInstruction+0x32>
 226:	00 c0       	rjmp	.+0      	; 0x228 <sendInstruction+0x38>
 228:	00 00       	nop
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <LCDInit>:
 22e:	e1 e0       	ldi	r30, 0x01	; 1
 230:	f1 e0       	ldi	r31, 0x01	; 1
 232:	80 81       	ld	r24, Z
 234:	88 67       	ori	r24, 0x78	; 120
 236:	80 83       	st	Z, r24
 238:	8d b1       	in	r24, 0x0d	; 13
 23a:	88 60       	ori	r24, 0x08	; 8
 23c:	8d b9       	out	0x0d, r24	; 13
 23e:	83 b3       	in	r24, 0x13	; 19
 240:	80 62       	ori	r24, 0x20	; 32
 242:	83 bb       	out	0x13, r24	; 19
 244:	2f ef       	ldi	r18, 0xFF	; 255
 246:	80 e7       	ldi	r24, 0x70	; 112
 248:	92 e0       	ldi	r25, 0x02	; 2
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	80 40       	sbci	r24, 0x00	; 0
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <LCDInit+0x1c>
 252:	00 c0       	rjmp	.+0      	; 0x254 <LCDInit+0x26>
 254:	00 00       	nop
 256:	84 b3       	in	r24, 0x14	; 20
 258:	80 62       	ori	r24, 0x20	; 32
 25a:	84 bb       	out	0x14, r24	; 20
 25c:	8e b1       	in	r24, 0x0e	; 14
 25e:	88 60       	ori	r24, 0x08	; 8
 260:	8e b9       	out	0x0e, r24	; 14
 262:	71 df       	rcall	.-286    	; 0x146 <pulse_E>
 264:	8f e3       	ldi	r24, 0x3F	; 63
 266:	9c e9       	ldi	r25, 0x9C	; 156
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <LCDInit+0x3a>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <LCDInit+0x40>
 26e:	00 00       	nop
 270:	6a df       	rcall	.-300    	; 0x146 <pulse_E>
 272:	8f e3       	ldi	r24, 0x3F	; 63
 274:	9c e9       	ldi	r25, 0x9C	; 156
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCDInit+0x48>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCDInit+0x4e>
 27c:	00 00       	nop
 27e:	63 df       	rcall	.-314    	; 0x146 <pulse_E>
 280:	8f e3       	ldi	r24, 0x3F	; 63
 282:	9c e9       	ldi	r25, 0x9C	; 156
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <LCDInit+0x56>
 288:	00 c0       	rjmp	.+0      	; 0x28a <LCDInit+0x5c>
 28a:	00 00       	nop
 28c:	84 b3       	in	r24, 0x14	; 20
 28e:	8f 7d       	andi	r24, 0xDF	; 223
 290:	84 bb       	out	0x14, r24	; 20
 292:	59 df       	rcall	.-334    	; 0x146 <pulse_E>
 294:	88 e2       	ldi	r24, 0x28	; 40
 296:	ac df       	rcall	.-168    	; 0x1f0 <sendInstruction>
 298:	88 e0       	ldi	r24, 0x08	; 8
 29a:	aa df       	rcall	.-172    	; 0x1f0 <sendInstruction>
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	a8 df       	rcall	.-176    	; 0x1f0 <sendInstruction>
 2a0:	86 e0       	ldi	r24, 0x06	; 6
 2a2:	a6 df       	rcall	.-180    	; 0x1f0 <sendInstruction>
 2a4:	8c e0       	ldi	r24, 0x0C	; 12
 2a6:	a4 cf       	rjmp	.-184    	; 0x1f0 <sendInstruction>
 2a8:	08 95       	ret

000002aa <LCDClear>:
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	a1 df       	rcall	.-190    	; 0x1f0 <sendInstruction>
 2ae:	8f e9       	ldi	r24, 0x9F	; 159
 2b0:	9f e0       	ldi	r25, 0x0F	; 15
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCDClear+0x8>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LCDClear+0xe>
 2b8:	00 00       	nop
 2ba:	08 95       	ret

000002bc <LCDGotoXY>:
 2bc:	62 30       	cpi	r22, 0x02	; 2
 2be:	50 f4       	brcc	.+20     	; 0x2d4 <LCDGotoXY+0x18>
 2c0:	80 31       	cpi	r24, 0x10	; 16
 2c2:	40 f4       	brcc	.+16     	; 0x2d4 <LCDGotoXY+0x18>
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	20 e4       	ldi	r18, 0x40	; 64
 2c8:	62 9f       	mul	r22, r18
 2ca:	80 0d       	add	r24, r0
 2cc:	91 1d       	adc	r25, r1
 2ce:	11 24       	eor	r1, r1
 2d0:	80 68       	ori	r24, 0x80	; 128
 2d2:	8e cf       	rjmp	.-228    	; 0x1f0 <sendInstruction>
 2d4:	08 95       	ret

000002d6 <LCDDispChar>:
 2d6:	78 cf       	rjmp	.-272    	; 0x1c8 <sendData>
 2d8:	08 95       	ret

000002da <LCDDispString>:
 2da:	ef 92       	push	r14
 2dc:	ff 92       	push	r15
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	8c 01       	movw	r16, r24
 2e8:	7b 01       	movw	r14, r22
 2ea:	61 32       	cpi	r22, 0x21	; 33
 2ec:	71 05       	cpc	r23, r1
 2ee:	5c f4       	brge	.+22     	; 0x306 <LCDDispString+0x2c>
 2f0:	c0 e0       	ldi	r28, 0x00	; 0
 2f2:	d0 e0       	ldi	r29, 0x00	; 0
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <LCDDispString+0x26>
 2f6:	f8 01       	movw	r30, r16
 2f8:	81 91       	ld	r24, Z+
 2fa:	8f 01       	movw	r16, r30
 2fc:	ec df       	rcall	.-40     	; 0x2d6 <LCDDispChar>
 2fe:	21 96       	adiw	r28, 0x01	; 1
 300:	ce 15       	cp	r28, r14
 302:	df 05       	cpc	r29, r15
 304:	c4 f3       	brlt	.-16     	; 0x2f6 <LCDDispString+0x1c>
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	ff 90       	pop	r15
 310:	ef 90       	pop	r14
 312:	08 95       	ret

00000314 <LCDDispInteger>:
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	60 97       	sbiw	r28, 0x10	; 16
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
 32c:	8c 01       	movw	r16, r24
 32e:	81 15       	cp	r24, r1
 330:	60 e8       	ldi	r22, 0x80	; 128
 332:	96 07       	cpc	r25, r22
 334:	31 f4       	brne	.+12     	; 0x342 <LCDDispInteger+0x2e>
 336:	63 e0       	ldi	r22, 0x03	; 3
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	92 e0       	ldi	r25, 0x02	; 2
 33e:	cd df       	rcall	.-102    	; 0x2da <LCDDispString>
 340:	60 c0       	rjmp	.+192    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 342:	99 23       	and	r25, r25
 344:	2c f4       	brge	.+10     	; 0x350 <LCDDispInteger+0x3c>
 346:	88 27       	eor	r24, r24
 348:	99 27       	eor	r25, r25
 34a:	80 1b       	sub	r24, r16
 34c:	91 0b       	sbc	r25, r17
 34e:	00 c0       	rjmp	.+0      	; 0x350 <LCDDispInteger+0x3c>
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	09 c0       	rjmp	.+18     	; 0x368 <LCDDispInteger+0x54>
 356:	e1 e0       	ldi	r30, 0x01	; 1
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	ec 0f       	add	r30, r28
 35c:	fd 1f       	adc	r31, r29
 35e:	e2 0f       	add	r30, r18
 360:	f3 1f       	adc	r31, r19
 362:	10 82       	st	Z, r1
 364:	2f 5f       	subi	r18, 0xFF	; 255
 366:	3f 4f       	sbci	r19, 0xFF	; 255
 368:	28 30       	cpi	r18, 0x08	; 8
 36a:	31 05       	cpc	r19, r1
 36c:	a4 f3       	brlt	.-24     	; 0x356 <LCDDispInteger+0x42>
 36e:	20 e0       	ldi	r18, 0x00	; 0
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	27 c0       	rjmp	.+78     	; 0x3c2 <LCDDispInteger+0xae>
 374:	8a 30       	cpi	r24, 0x0A	; 10
 376:	91 05       	cpc	r25, r1
 378:	ac f4       	brge	.+42     	; 0x3a4 <LCDDispInteger+0x90>
 37a:	80 5d       	subi	r24, 0xD0	; 208
 37c:	e1 e0       	ldi	r30, 0x01	; 1
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	ec 0f       	add	r30, r28
 382:	fd 1f       	adc	r31, r29
 384:	e2 0f       	add	r30, r18
 386:	f3 1f       	adc	r31, r19
 388:	80 83       	st	Z, r24
 38a:	11 23       	and	r17, r17
 38c:	e4 f4       	brge	.+56     	; 0x3c6 <LCDDispInteger+0xb2>
 38e:	2f 5f       	subi	r18, 0xFF	; 255
 390:	3f 4f       	sbci	r19, 0xFF	; 255
 392:	e1 e0       	ldi	r30, 0x01	; 1
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	ec 0f       	add	r30, r28
 398:	fd 1f       	adc	r31, r29
 39a:	e2 0f       	add	r30, r18
 39c:	f3 1f       	adc	r31, r19
 39e:	8d e2       	ldi	r24, 0x2D	; 45
 3a0:	80 83       	st	Z, r24
 3a2:	11 c0       	rjmp	.+34     	; 0x3c6 <LCDDispInteger+0xb2>
 3a4:	6a e0       	ldi	r22, 0x0A	; 10
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	1f d1       	rcall	.+574    	; 0x5e8 <__divmodhi4>
 3aa:	80 5d       	subi	r24, 0xD0	; 208
 3ac:	e1 e0       	ldi	r30, 0x01	; 1
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	ec 0f       	add	r30, r28
 3b2:	fd 1f       	adc	r31, r29
 3b4:	e2 0f       	add	r30, r18
 3b6:	f3 1f       	adc	r31, r19
 3b8:	80 83       	st	Z, r24
 3ba:	86 2f       	mov	r24, r22
 3bc:	97 2f       	mov	r25, r23
 3be:	2f 5f       	subi	r18, 0xFF	; 255
 3c0:	3f 4f       	sbci	r19, 0xFF	; 255
 3c2:	00 97       	sbiw	r24, 0x00	; 0
 3c4:	b9 f6       	brne	.-82     	; 0x374 <LCDDispInteger+0x60>
 3c6:	c9 01       	movw	r24, r18
 3c8:	14 c0       	rjmp	.+40     	; 0x3f2 <LCDDispInteger+0xde>
 3ca:	e1 e0       	ldi	r30, 0x01	; 1
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	ec 0f       	add	r30, r28
 3d0:	fd 1f       	adc	r31, r29
 3d2:	e8 0f       	add	r30, r24
 3d4:	f9 1f       	adc	r31, r25
 3d6:	40 81       	ld	r20, Z
 3d8:	44 23       	and	r20, r20
 3da:	51 f0       	breq	.+20     	; 0x3f0 <LCDDispInteger+0xdc>
 3dc:	f9 01       	movw	r30, r18
 3de:	e8 1b       	sub	r30, r24
 3e0:	f9 0b       	sbc	r31, r25
 3e2:	69 e0       	ldi	r22, 0x09	; 9
 3e4:	70 e0       	ldi	r23, 0x00	; 0
 3e6:	6c 0f       	add	r22, r28
 3e8:	7d 1f       	adc	r23, r29
 3ea:	e6 0f       	add	r30, r22
 3ec:	f7 1f       	adc	r31, r23
 3ee:	40 83       	st	Z, r20
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	99 23       	and	r25, r25
 3f4:	54 f7       	brge	.-44     	; 0x3ca <LCDDispInteger+0xb6>
 3f6:	b9 01       	movw	r22, r18
 3f8:	6f 5f       	subi	r22, 0xFF	; 255
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255
 3fc:	ce 01       	movw	r24, r28
 3fe:	09 96       	adiw	r24, 0x09	; 9
 400:	6c df       	rcall	.-296    	; 0x2da <LCDDispString>
 402:	60 96       	adiw	r28, 0x10	; 16
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	08 95       	ret

00000418 <LCDOnOffControl>:
 418:	81 11       	cpse	r24, r1
 41a:	02 c0       	rjmp	.+4      	; 0x420 <LCDOnOffControl+0x8>
 41c:	88 e0       	ldi	r24, 0x08	; 8
 41e:	01 c0       	rjmp	.+2      	; 0x422 <LCDOnOffControl+0xa>
 420:	8c e0       	ldi	r24, 0x0C	; 12
 422:	61 11       	cpse	r22, r1
 424:	82 60       	ori	r24, 0x02	; 2
 426:	e4 de       	rcall	.-568    	; 0x1f0 <sendInstruction>
 428:	8f e9       	ldi	r24, 0x9F	; 159
 42a:	9f e0       	ldi	r25, 0x0F	; 15
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <LCDOnOffControl+0x14>
 430:	00 c0       	rjmp	.+0      	; 0x432 <LCDOnOffControl+0x1a>
 432:	00 00       	nop
 434:	08 95       	ret

00000436 <LCDCursorRight>:

// Moves the cursor to the right
void LCDCursorRight()
{
  // To be implemented
  sendInstruction(0b00010100);
 436:	84 e1       	ldi	r24, 0x14	; 20
 438:	db ce       	rjmp	.-586    	; 0x1f0 <sendInstruction>
 43a:	08 95       	ret

0000043c <measure_velocity>:
#define WAIT_1S _delay_ms(1000)
#define WAIT_2S _delay_ms(2000)

#define MEASUREMENT_COUNT 5

void measure_velocity(int* val, int threshold){
 43c:	af 92       	push	r10
 43e:	bf 92       	push	r11
 440:	cf 92       	push	r12
 442:	df 92       	push	r13
 444:	ef 92       	push	r14
 446:	ff 92       	push	r15
 448:	0f 93       	push	r16
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	cd b7       	in	r28, 0x3d	; 61
 452:	de b7       	in	r29, 0x3e	; 62
 454:	2a 97       	sbiw	r28, 0x0a	; 10
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	f8 94       	cli
 45a:	de bf       	out	0x3e, r29	; 62
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	cd bf       	out	0x3d, r28	; 61
	if(*val > threshold) return;
 460:	dc 01       	movw	r26, r24
 462:	cd 90       	ld	r12, X+
 464:	dc 90       	ld	r13, X
 466:	6c 15       	cp	r22, r12
 468:	7d 05       	cpc	r23, r13
 46a:	0c f4       	brge	.+2      	; 0x46e <measure_velocity+0x32>
 46c:	49 c0       	rjmp	.+146    	; 0x500 <measure_velocity+0xc4>
 46e:	5c 01       	movw	r10, r24
	int temp = *val;
	LCDGotoXY(0, 1);
 470:	61 e0       	ldi	r22, 0x01	; 1
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	23 df       	rcall	.-442    	; 0x2bc <LCDGotoXY>
	LCDDispString("***", 3);
 476:	63 e0       	ldi	r22, 0x03	; 3
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	84 e0       	ldi	r24, 0x04	; 4
 47c:	92 e0       	ldi	r25, 0x02	; 2
 47e:	2d df       	rcall	.-422    	; 0x2da <LCDDispString>
	int lowest = temp;
	int avg = temp;
	int it = 0;
	int measurements[MEASUREMENT_COUNT];
	memset(measurements, 0, sizeof(measurements));
 480:	fe 01       	movw	r30, r28
 482:	31 96       	adiw	r30, 0x01	; 1
 484:	8a e0       	ldi	r24, 0x0A	; 10
 486:	df 01       	movw	r26, r30
 488:	1d 92       	st	X+, r1
 48a:	8a 95       	dec	r24
 48c:	e9 f7       	brne	.-6      	; 0x488 <measure_velocity+0x4c>
	if(*val > threshold) return;
	int temp = *val;
	LCDGotoXY(0, 1);
	LCDDispString("***", 3);
	int lowest = temp;
	int avg = temp;
 48e:	86 01       	movw	r16, r12
	int it = 0;
 490:	e1 2c       	mov	r14, r1
	int measurements[MEASUREMENT_COUNT];
	memset(measurements, 0, sizeof(measurements));
	
	// Take avg of 20 measurements
	while(it < MEASUREMENT_COUNT){
 492:	f1 2c       	mov	r15, r1
		
		temp = adc_read_single();
 494:	26 c0       	rjmp	.+76     	; 0x4e2 <measure_velocity+0xa6>
 496:	49 de       	rcall	.-878    	; 0x12a <adc_read_single>
		if(temp == 1024){
 498:	81 15       	cp	r24, r1
 49a:	b4 e0       	ldi	r27, 0x04	; 4
 49c:	9b 07       	cpc	r25, r27
 49e:	09 f1       	breq	.+66     	; 0x4e2 <measure_velocity+0xa6>
			continue;
		}
		measurements[it] = temp;
 4a0:	f7 01       	movw	r30, r14
 4a2:	ee 0f       	add	r30, r30
 4a4:	ff 1f       	adc	r31, r31
 4a6:	21 e0       	ldi	r18, 0x01	; 1
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	2c 0f       	add	r18, r28
 4ac:	3d 1f       	adc	r19, r29
 4ae:	e2 0f       	add	r30, r18
 4b0:	f3 1f       	adc	r31, r19
 4b2:	91 83       	std	Z+1, r25	; 0x01
 4b4:	80 83       	st	Z, r24
		//if(temp > threshold + 50){
			//break;
		//}
		avg += temp;
 4b6:	08 0f       	add	r16, r24
 4b8:	19 1f       	adc	r17, r25
		avg /= 2;
 4ba:	11 23       	and	r17, r17
 4bc:	14 f4       	brge	.+4      	; 0x4c2 <measure_velocity+0x86>
 4be:	0f 5f       	subi	r16, 0xFF	; 255
 4c0:	1f 4f       	sbci	r17, 0xFF	; 255
 4c2:	15 95       	asr	r17
 4c4:	07 95       	ror	r16
		if(temp < lowest) lowest = temp;
 4c6:	8c 15       	cp	r24, r12
 4c8:	9d 05       	cpc	r25, r13
 4ca:	0c f0       	brlt	.+2      	; 0x4ce <measure_velocity+0x92>
 4cc:	c6 01       	movw	r24, r12
		it++;
 4ce:	3f ef       	ldi	r19, 0xFF	; 255
 4d0:	e3 1a       	sub	r14, r19
 4d2:	f3 0a       	sbc	r15, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d4:	af e8       	ldi	r26, 0x8F	; 143
 4d6:	b1 e0       	ldi	r27, 0x01	; 1
 4d8:	11 97       	sbiw	r26, 0x01	; 1
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <measure_velocity+0x9c>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <measure_velocity+0xa2>
 4de:	00 00       	nop
 4e0:	6c 01       	movw	r12, r24
	int it = 0;
	int measurements[MEASUREMENT_COUNT];
	memset(measurements, 0, sizeof(measurements));
	
	// Take avg of 20 measurements
	while(it < MEASUREMENT_COUNT){
 4e2:	b5 e0       	ldi	r27, 0x05	; 5
 4e4:	eb 16       	cp	r14, r27
 4e6:	f1 04       	cpc	r15, r1
		avg /= 2;
		if(temp < lowest) lowest = temp;
		it++;
		_delay_us(100);
	}
	LCDGotoXY(0, 1);
 4e8:	b4 f2       	brlt	.-84     	; 0x496 <measure_velocity+0x5a>
 4ea:	61 e0       	ldi	r22, 0x01	; 1
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	e6 de       	rcall	.-564    	; 0x2bc <LCDGotoXY>
	LCDDispString("   ", 3);
 4f0:	63 e0       	ldi	r22, 0x03	; 3
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	88 e0       	ldi	r24, 0x08	; 8
 4f6:	92 e0       	ldi	r25, 0x02	; 2
 4f8:	f0 de       	rcall	.-544    	; 0x2da <LCDDispString>
	*val = avg;
 4fa:	f5 01       	movw	r30, r10
 4fc:	11 83       	std	Z+1, r17	; 0x01
 4fe:	00 83       	st	Z, r16
	
}
 500:	2a 96       	adiw	r28, 0x0a	; 10
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	f8 94       	cli
 506:	de bf       	out	0x3e, r29	; 62
 508:	0f be       	out	0x3f, r0	; 63
 50a:	cd bf       	out	0x3d, r28	; 61
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	1f 91       	pop	r17
 512:	0f 91       	pop	r16
 514:	ff 90       	pop	r15
 516:	ef 90       	pop	r14
 518:	df 90       	pop	r13
 51a:	cf 90       	pop	r12
 51c:	bf 90       	pop	r11
 51e:	af 90       	pop	r10
 520:	08 95       	ret

00000522 <main>:

int main(void){
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	1f 92       	push	r1
 528:	1f 92       	push	r1
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
	char SRAMstring[] = "String in SRAM";
	int i;
	init_adc();
 52e:	f2 dd       	rcall	.-1052   	; 0x114 <init_adc>
	// Initialize the display
	LCDInit();
 530:	7e de       	rcall	.-772    	; 0x22e <LCDInit>
	LCDDispChar('A');
 532:	81 e4       	ldi	r24, 0x41	; 65
 534:	d0 de       	rcall	.-608    	; 0x2d6 <LCDDispChar>
	LCDGotoXY(5, 0);
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	85 e0       	ldi	r24, 0x05	; 5
 53a:	c0 de       	rcall	.-640    	; 0x2bc <LCDGotoXY>
	LCDDispChar('B');
 53c:	82 e4       	ldi	r24, 0x42	; 66
 53e:	cb de       	rcall	.-618    	; 0x2d6 <LCDDispChar>
	LCDGotoXY(0, 1);
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	bb de       	rcall	.-650    	; 0x2bc <LCDGotoXY>
	LCDDispChar('C');
 546:	83 e4       	ldi	r24, 0x43	; 67
 548:	c6 de       	rcall	.-628    	; 0x2d6 <LCDDispChar>
 54a:	61 e0       	ldi	r22, 0x01	; 1
	LCDGotoXY(8, 1);
 54c:	88 e0       	ldi	r24, 0x08	; 8
 54e:	b6 de       	rcall	.-660    	; 0x2bc <LCDGotoXY>
	LCDDispString("Hello", 5);
 550:	65 e0       	ldi	r22, 0x05	; 5
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	8c e0       	ldi	r24, 0x0C	; 12
 556:	92 e0       	ldi	r25, 0x02	; 2
	LCDClear();
 558:	c0 de       	rcall	.-640    	; 0x2da <LCDDispString>
 55a:	a7 de       	rcall	.-690    	; 0x2aa <LCDClear>
	int val;
	val = adc_read_single();
 55c:	e6 dd       	rcall	.-1076   	; 0x12a <adc_read_single>
	LCDDispInteger(val);
 55e:	da de       	rcall	.-588    	; 0x314 <LCDDispInteger>
 560:	6a df       	rcall	.-300    	; 0x436 <LCDCursorRight>
	LCDCursorRight();
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	81 e0       	ldi	r24, 0x01	; 1
	int it = 0;
	LCDOnOffControl(1, 0);
 566:	58 df       	rcall	.-336    	; 0x418 <LCDOnOffControl>
 568:	d1 2c       	mov	r13, r1
 56a:	e1 2c       	mov	r14, r1
 56c:	f1 2c       	mov	r15, r1
	char print = 0;
	int cursorx = 0;
	int cursory = 0;
 56e:	00 e0       	ldi	r16, 0x00	; 0
	LCDDispInteger(val);
	LCDCursorRight();
	int it = 0;
	LCDOnOffControl(1, 0);
	char print = 0;
	int cursorx = 0;
 570:	10 e0       	ldi	r17, 0x00	; 0
	LCDClear();
	int val;
	val = adc_read_single();
	LCDDispInteger(val);
	LCDCursorRight();
	int it = 0;
 572:	db dd       	rcall	.-1098   	; 0x12a <adc_read_single>
 574:	9a 83       	std	Y+2, r25	; 0x02
	char print = 0;
	int cursorx = 0;
	int cursory = 0;
	int threshold = 900;
	while(1){
		int val = adc_read_single();
 576:	89 83       	std	Y+1, r24	; 0x01
 578:	84 38       	cpi	r24, 0x84	; 132
 57a:	93 40       	sbci	r25, 0x03	; 3
 57c:	2c f4       	brge	.+10     	; 0x588 <main+0x66>
		
		if(val < threshold){
 57e:	64 e8       	ldi	r22, 0x84	; 132
 580:	73 e0       	ldi	r23, 0x03	; 3
 582:	ce 01       	movw	r24, r28
			print = 1;
			int* p = &val;
			measure_velocity(p, threshold);
 584:	01 96       	adiw	r24, 0x01	; 1
 586:	5a df       	rcall	.-332    	; 0x43c <measure_velocity>
 588:	89 81       	ldd	r24, Y+1	; 0x01
 58a:	9a 81       	ldd	r25, Y+2	; 0x02
 58c:	84 38       	cpi	r24, 0x84	; 132
		}
		
		if(val < threshold){
 58e:	93 40       	sbci	r25, 0x03	; 3
 590:	84 f7       	brge	.-32     	; 0x572 <main+0x50>
 592:	85 e0       	ldi	r24, 0x05	; 5
 594:	e8 0e       	add	r14, r24
			cursorx += 5;
 596:	f1 1c       	adc	r15, r1
 598:	6d 2d       	mov	r22, r13
 59a:	8e 2d       	mov	r24, r14
			LCDGotoXY(cursorx, cursory);
 59c:	8f de       	rcall	.-738    	; 0x2bc <LCDGotoXY>
 59e:	0f 5f       	subi	r16, 0xFF	; 255
 5a0:	1f 4f       	sbci	r17, 0xFF	; 255
 5a2:	03 30       	cpi	r16, 0x03	; 3
			it++;
 5a4:	11 05       	cpc	r17, r1
			if(it == 3){
 5a6:	51 f4       	brne	.+20     	; 0x5bc <main+0x9a>
 5a8:	61 e0       	ldi	r22, 0x01	; 1
 5aa:	84 e0       	ldi	r24, 0x04	; 4
				cursory = 1;
				cursorx = 4;
				LCDGotoXY(cursorx, cursory);			
 5ac:	87 de       	rcall	.-754    	; 0x2bc <LCDGotoXY>
 5ae:	dd 24       	eor	r13, r13
 5b0:	d3 94       	inc	r13
 5b2:	68 94       	set
		if(val < threshold){
			cursorx += 5;
			LCDGotoXY(cursorx, cursory);
			it++;
			if(it == 3){
				cursory = 1;
 5b4:	ee 24       	eor	r14, r14
				cursorx = 4;
 5b6:	e2 f8       	bld	r14, 2
 5b8:	f1 2c       	mov	r15, r1
 5ba:	09 c0       	rjmp	.+18     	; 0x5ce <main+0xac>
 5bc:	06 30       	cpi	r16, 0x06	; 6
 5be:	11 05       	cpc	r17, r1
				LCDGotoXY(cursorx, cursory);			
			}
			else if(it > 5){
 5c0:	34 f0       	brlt	.+12     	; 0x5ce <main+0xac>
 5c2:	73 de       	rcall	.-794    	; 0x2aa <LCDClear>
 5c4:	d1 2c       	mov	r13, r1
				LCDClear();
 5c6:	e1 2c       	mov	r14, r1
 5c8:	f1 2c       	mov	r15, r1
				cursorx = 0;
				cursory = 0;
 5ca:	00 e0       	ldi	r16, 0x00	; 0
				cursorx = 4;
				LCDGotoXY(cursorx, cursory);			
			}
			else if(it > 5){
				LCDClear();
				cursorx = 0;
 5cc:	10 e0       	ldi	r17, 0x00	; 0
 5ce:	89 81       	ldd	r24, Y+1	; 0x01
				cursory = 0;
				it = 0;
 5d0:	9a 81       	ldd	r25, Y+2	; 0x02
 5d2:	a0 de       	rcall	.-704    	; 0x314 <LCDDispInteger>
			}
			LCDDispInteger(val);
 5d4:	9f ef       	ldi	r25, 0xFF	; 255
 5d6:	21 ee       	ldi	r18, 0xE1	; 225
 5d8:	84 e0       	ldi	r24, 0x04	; 4
 5da:	91 50       	subi	r25, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5dc:	20 40       	sbci	r18, 0x00	; 0
 5de:	80 40       	sbci	r24, 0x00	; 0
 5e0:	e1 f7       	brne	.-8      	; 0x5da <main+0xb8>
 5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <main+0xc2>
 5e4:	00 00       	nop
 5e6:	c5 cf       	rjmp	.-118    	; 0x572 <main+0x50>

000005e8 <__divmodhi4>:
 5e8:	97 fb       	bst	r25, 7
 5ea:	07 2e       	mov	r0, r23
 5ec:	16 f4       	brtc	.+4      	; 0x5f2 <__divmodhi4+0xa>
			_delay_ms(100);
			//LCDCursorRight();
			print = 0;
		}
	}
 5ee:	00 94       	com	r0
 5f0:	06 d0       	rcall	.+12     	; 0x5fe <__divmodhi4_neg1>
 5f2:	77 fd       	sbrc	r23, 7
 5f4:	08 d0       	rcall	.+16     	; 0x606 <__divmodhi4_neg2>
 5f6:	0b d0       	rcall	.+22     	; 0x60e <__udivmodhi4>
 5f8:	07 fc       	sbrc	r0, 7
 5fa:	05 d0       	rcall	.+10     	; 0x606 <__divmodhi4_neg2>
 5fc:	3e f4       	brtc	.+14     	; 0x60c <__divmodhi4_exit>

000005fe <__divmodhi4_neg1>:
 5fe:	90 95       	com	r25
 600:	81 95       	neg	r24
 602:	9f 4f       	sbci	r25, 0xFF	; 255
 604:	08 95       	ret

00000606 <__divmodhi4_neg2>:
 606:	70 95       	com	r23
 608:	61 95       	neg	r22
 60a:	7f 4f       	sbci	r23, 0xFF	; 255

0000060c <__divmodhi4_exit>:
 60c:	08 95       	ret

0000060e <__udivmodhi4>:
 60e:	aa 1b       	sub	r26, r26
 610:	bb 1b       	sub	r27, r27
 612:	51 e1       	ldi	r21, 0x11	; 17
 614:	07 c0       	rjmp	.+14     	; 0x624 <__udivmodhi4_ep>

00000616 <__udivmodhi4_loop>:
 616:	aa 1f       	adc	r26, r26
 618:	bb 1f       	adc	r27, r27
 61a:	a6 17       	cp	r26, r22
 61c:	b7 07       	cpc	r27, r23
 61e:	10 f0       	brcs	.+4      	; 0x624 <__udivmodhi4_ep>
 620:	a6 1b       	sub	r26, r22
 622:	b7 0b       	sbc	r27, r23

00000624 <__udivmodhi4_ep>:
 624:	88 1f       	adc	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	5a 95       	dec	r21
 62a:	a9 f7       	brne	.-22     	; 0x616 <__udivmodhi4_loop>
 62c:	80 95       	com	r24
 62e:	90 95       	com	r25
 630:	bc 01       	movw	r22, r24
 632:	cd 01       	movw	r24, r26
 634:	08 95       	ret

00000636 <_exit>:
 636:	f8 94       	cli

00000638 <__stop_program>:
 638:	ff cf       	rjmp	.-2      	; 0x638 <__stop_program>
