
RTOS_MA1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800200  00000ef2  00000f86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ef2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063d  00800216  00800216  00000f9c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003170  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012e6  00000000  00000000  0000441c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b7f  00000000  00000000  00005702  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000760  00000000  00000000  00007284  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011b8  00000000  00000000  000079e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023c3  00000000  00000000  00008b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000af5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	5d c2       	rjmp	.+1210   	; 0x578 <__vector_47>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ef       	ldi	r30, 0xF2	; 242
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 31       	cpi	r26, 0x16	; 22
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	28 e0       	ldi	r18, 0x08	; 8
 110:	a6 e1       	ldi	r26, 0x16	; 22
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 35       	cpi	r26, 0x53	; 83
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	c6 d6       	rcall	.+3468   	; 0xeac <main>
 120:	e6 c6       	rjmp	.+3532   	; 0xeee <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initLEDport>:
  if (led_nr <= MAX_LED_NR)
  {
	// Dan (inverteret) maske på basis af parameteren (led_nr)
    mask = ~(0b00000001 << led_nr);
    // Sluk den aktuelle lysdiode (de andre ændres ikke)
    PORTB = PINB & mask;
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	84 b9       	out	0x04, r24	; 4
 128:	15 b8       	out	0x05, r1	; 5
 12a:	08 95       	ret

0000012c <toggleLED>:
void toggleLED(unsigned char led_nr)
{
  // Lokal variabel
  unsigned char mask;
  // Vi skal kun lave noget, hvis led_nr < 8
  if (led_nr <= MAX_LED_NR)
 12c:	88 30       	cpi	r24, 0x08	; 8
 12e:	60 f4       	brcc	.+24     	; 0x148 <toggleLED+0x1c>
  {
    // Dan maske på basis af parameteren (led_nr)
    mask = 0b00000001 << led_nr;
 130:	21 e0       	ldi	r18, 0x01	; 1
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	a9 01       	movw	r20, r18
 136:	02 c0       	rjmp	.+4      	; 0x13c <toggleLED+0x10>
 138:	44 0f       	add	r20, r20
 13a:	55 1f       	adc	r21, r21
 13c:	8a 95       	dec	r24
 13e:	e2 f7       	brpl	.-8      	; 0x138 <toggleLED+0xc>
 140:	ca 01       	movw	r24, r20
    // Toggle den aktuelle lysdiode (de andre ændres ikke)
    PORTB = PINB ^ mask;
 142:	93 b1       	in	r25, 0x03	; 3
 144:	89 27       	eor	r24, r25
 146:	85 b9       	out	0x05, r24	; 5
 148:	08 95       	ret

0000014a <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
 14a:	fc 01       	movw	r30, r24
 14c:	03 96       	adiw	r24, 0x03	; 3
 14e:	92 83       	std	Z+2, r25	; 0x02
 150:	81 83       	std	Z+1, r24	; 0x01
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	3f ef       	ldi	r19, 0xFF	; 255
 156:	34 83       	std	Z+4, r19	; 0x04
 158:	23 83       	std	Z+3, r18	; 0x03
 15a:	96 83       	std	Z+6, r25	; 0x06
 15c:	85 83       	std	Z+5, r24	; 0x05
 15e:	90 87       	std	Z+8, r25	; 0x08
 160:	87 83       	std	Z+7, r24	; 0x07
 162:	10 82       	st	Z, r1
 164:	08 95       	ret

00000166 <vListInitialiseItem>:
 166:	fc 01       	movw	r30, r24
 168:	11 86       	std	Z+9, r1	; 0x09
 16a:	10 86       	std	Z+8, r1	; 0x08
 16c:	08 95       	ret

0000016e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 174:	48 81       	ld	r20, Y
 176:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 178:	4f 3f       	cpi	r20, 0xFF	; 255
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	52 07       	cpc	r21, r18
 17e:	21 f4       	brne	.+8      	; 0x188 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 180:	fc 01       	movw	r30, r24
 182:	a7 81       	ldd	r26, Z+7	; 0x07
 184:	b0 85       	ldd	r27, Z+8	; 0x08
 186:	0d c0       	rjmp	.+26     	; 0x1a2 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 188:	dc 01       	movw	r26, r24
 18a:	13 96       	adiw	r26, 0x03	; 3
 18c:	01 c0       	rjmp	.+2      	; 0x190 <vListInsert+0x22>
 18e:	df 01       	movw	r26, r30
 190:	12 96       	adiw	r26, 0x02	; 2
 192:	ed 91       	ld	r30, X+
 194:	fc 91       	ld	r31, X
 196:	13 97       	sbiw	r26, 0x03	; 3
 198:	20 81       	ld	r18, Z
 19a:	31 81       	ldd	r19, Z+1	; 0x01
 19c:	42 17       	cp	r20, r18
 19e:	53 07       	cpc	r21, r19
 1a0:	b0 f7       	brcc	.-20     	; 0x18e <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 1a2:	12 96       	adiw	r26, 0x02	; 2
 1a4:	ed 91       	ld	r30, X+
 1a6:	fc 91       	ld	r31, X
 1a8:	13 97       	sbiw	r26, 0x03	; 3
 1aa:	fb 83       	std	Y+3, r31	; 0x03
 1ac:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 1ae:	d5 83       	std	Z+5, r29	; 0x05
 1b0:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
 1b2:	bd 83       	std	Y+5, r27	; 0x05
 1b4:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
 1b6:	13 96       	adiw	r26, 0x03	; 3
 1b8:	dc 93       	st	X, r29
 1ba:	ce 93       	st	-X, r28
 1bc:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 1be:	99 87       	std	Y+9, r25	; 0x09
 1c0:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
 1c2:	fc 01       	movw	r30, r24
 1c4:	20 81       	ld	r18, Z
 1c6:	2f 5f       	subi	r18, 0xFF	; 255
 1c8:	20 83       	st	Z, r18
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 1d6:	a0 85       	ldd	r26, Z+8	; 0x08
 1d8:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1da:	c2 81       	ldd	r28, Z+2	; 0x02
 1dc:	d3 81       	ldd	r29, Z+3	; 0x03
 1de:	84 81       	ldd	r24, Z+4	; 0x04
 1e0:	95 81       	ldd	r25, Z+5	; 0x05
 1e2:	9d 83       	std	Y+5, r25	; 0x05
 1e4:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 1e6:	c4 81       	ldd	r28, Z+4	; 0x04
 1e8:	d5 81       	ldd	r29, Z+5	; 0x05
 1ea:	82 81       	ldd	r24, Z+2	; 0x02
 1ec:	93 81       	ldd	r25, Z+3	; 0x03
 1ee:	9b 83       	std	Y+3, r25	; 0x03
 1f0:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 1f2:	11 96       	adiw	r26, 0x01	; 1
 1f4:	8d 91       	ld	r24, X+
 1f6:	9c 91       	ld	r25, X
 1f8:	12 97       	sbiw	r26, 0x02	; 2
 1fa:	e8 17       	cp	r30, r24
 1fc:	f9 07       	cpc	r31, r25
 1fe:	31 f4       	brne	.+12     	; 0x20c <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	12 96       	adiw	r26, 0x02	; 2
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 20c:	11 86       	std	Z+9, r1	; 0x09
 20e:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
 210:	8c 91       	ld	r24, X
 212:	81 50       	subi	r24, 0x01	; 1
 214:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
 216:	8c 91       	ld	r24, X
}
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	ec 01       	movw	r28, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 224:	d9 d3       	rcall	.+1970   	; 0x9d8 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 226:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__data_end>
 22a:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <__data_end+0x1>
 22e:	89 2b       	or	r24, r25
 230:	31 f4       	brne	.+12     	; 0x23e <pvPortMalloc+0x20>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 232:	8a e1       	ldi	r24, 0x1A	; 26
 234:	92 e0       	ldi	r25, 0x02	; 2
 236:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <__data_end+0x1>
 23a:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <__data_end>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 23e:	20 97       	sbiw	r28, 0x00	; 0
 240:	c9 f0       	breq	.+50     	; 0x274 <pvPortMalloc+0x56>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 242:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <xNextFreeByte>
 246:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <xNextFreeByte+0x1>
 24a:	9e 01       	movw	r18, r28
 24c:	28 0f       	add	r18, r24
 24e:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 250:	2b 3d       	cpi	r18, 0xDB	; 219
 252:	45 e0       	ldi	r20, 0x05	; 5
 254:	34 07       	cpc	r19, r20
 256:	88 f4       	brcc	.+34     	; 0x27a <pvPortMalloc+0x5c>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 258:	82 17       	cp	r24, r18
 25a:	93 07       	cpc	r25, r19
 25c:	88 f4       	brcc	.+34     	; 0x280 <pvPortMalloc+0x62>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 25e:	c0 91 16 02 	lds	r28, 0x0216	; 0x800216 <__data_end>
 262:	d0 91 17 02 	lds	r29, 0x0217	; 0x800217 <__data_end+0x1>
 266:	c8 0f       	add	r28, r24
 268:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
 26a:	30 93 19 02 	sts	0x0219, r19	; 0x800219 <xNextFreeByte+0x1>
 26e:	20 93 18 02 	sts	0x0218, r18	; 0x800218 <xNextFreeByte>
 272:	08 c0       	rjmp	.+16     	; 0x284 <pvPortMalloc+0x66>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
 274:	c0 e0       	ldi	r28, 0x00	; 0
 276:	d0 e0       	ldi	r29, 0x00	; 0
 278:	05 c0       	rjmp	.+10     	; 0x284 <pvPortMalloc+0x66>
 27a:	c0 e0       	ldi	r28, 0x00	; 0
 27c:	d0 e0       	ldi	r29, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <pvPortMalloc+0x66>
 280:	c0 e0       	ldi	r28, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 282:	d0 e0       	ldi	r29, 0x00	; 0
 284:	c8 d4       	rcall	.+2448   	; 0xc16 <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
 286:	ce 01       	movw	r24, r28
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 28e:	08 95       	ret

00000290 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 290:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
 294:	89 ef       	ldi	r24, 0xF9	; 249
 296:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
 29a:	8b e0       	ldi	r24, 0x0B	; 11
 29c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x7c0121>
 2a0:	e3 e7       	ldi	r30, 0x73	; 115
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	82 60       	ori	r24, 0x02	; 2
 2a8:	80 83       	st	Z, r24
 2aa:	08 95       	ret

000002ac <pxPortInitialiseStack>:
 2ac:	31 e1       	ldi	r19, 0x11	; 17
 2ae:	fc 01       	movw	r30, r24
 2b0:	30 83       	st	Z, r19
 2b2:	31 97       	sbiw	r30, 0x01	; 1
 2b4:	22 e2       	ldi	r18, 0x22	; 34
 2b6:	20 83       	st	Z, r18
 2b8:	31 97       	sbiw	r30, 0x01	; 1
 2ba:	a3 e3       	ldi	r26, 0x33	; 51
 2bc:	a0 83       	st	Z, r26
 2be:	31 97       	sbiw	r30, 0x01	; 1
 2c0:	60 83       	st	Z, r22
 2c2:	31 97       	sbiw	r30, 0x01	; 1
 2c4:	70 83       	st	Z, r23
 2c6:	31 97       	sbiw	r30, 0x01	; 1
 2c8:	10 82       	st	Z, r1
 2ca:	31 97       	sbiw	r30, 0x01	; 1
 2cc:	10 82       	st	Z, r1
 2ce:	31 97       	sbiw	r30, 0x01	; 1
 2d0:	60 e8       	ldi	r22, 0x80	; 128
 2d2:	60 83       	st	Z, r22
 2d4:	31 97       	sbiw	r30, 0x01	; 1
 2d6:	10 82       	st	Z, r1
 2d8:	31 97       	sbiw	r30, 0x01	; 1
 2da:	10 82       	st	Z, r1
 2dc:	31 97       	sbiw	r30, 0x01	; 1
 2de:	10 82       	st	Z, r1
 2e0:	31 97       	sbiw	r30, 0x01	; 1
 2e2:	62 e0       	ldi	r22, 0x02	; 2
 2e4:	60 83       	st	Z, r22
 2e6:	31 97       	sbiw	r30, 0x01	; 1
 2e8:	63 e0       	ldi	r22, 0x03	; 3
 2ea:	60 83       	st	Z, r22
 2ec:	31 97       	sbiw	r30, 0x01	; 1
 2ee:	64 e0       	ldi	r22, 0x04	; 4
 2f0:	60 83       	st	Z, r22
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	65 e0       	ldi	r22, 0x05	; 5
 2f6:	60 83       	st	Z, r22
 2f8:	31 97       	sbiw	r30, 0x01	; 1
 2fa:	66 e0       	ldi	r22, 0x06	; 6
 2fc:	60 83       	st	Z, r22
 2fe:	31 97       	sbiw	r30, 0x01	; 1
 300:	67 e0       	ldi	r22, 0x07	; 7
 302:	60 83       	st	Z, r22
 304:	31 97       	sbiw	r30, 0x01	; 1
 306:	68 e0       	ldi	r22, 0x08	; 8
 308:	60 83       	st	Z, r22
 30a:	31 97       	sbiw	r30, 0x01	; 1
 30c:	69 e0       	ldi	r22, 0x09	; 9
 30e:	60 83       	st	Z, r22
 310:	31 97       	sbiw	r30, 0x01	; 1
 312:	60 e1       	ldi	r22, 0x10	; 16
 314:	60 83       	st	Z, r22
 316:	31 97       	sbiw	r30, 0x01	; 1
 318:	30 83       	st	Z, r19
 31a:	31 97       	sbiw	r30, 0x01	; 1
 31c:	32 e1       	ldi	r19, 0x12	; 18
 31e:	30 83       	st	Z, r19
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	33 e1       	ldi	r19, 0x13	; 19
 324:	30 83       	st	Z, r19
 326:	31 97       	sbiw	r30, 0x01	; 1
 328:	34 e1       	ldi	r19, 0x14	; 20
 32a:	30 83       	st	Z, r19
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	35 e1       	ldi	r19, 0x15	; 21
 330:	30 83       	st	Z, r19
 332:	31 97       	sbiw	r30, 0x01	; 1
 334:	36 e1       	ldi	r19, 0x16	; 22
 336:	30 83       	st	Z, r19
 338:	31 97       	sbiw	r30, 0x01	; 1
 33a:	37 e1       	ldi	r19, 0x17	; 23
 33c:	30 83       	st	Z, r19
 33e:	31 97       	sbiw	r30, 0x01	; 1
 340:	38 e1       	ldi	r19, 0x18	; 24
 342:	30 83       	st	Z, r19
 344:	31 97       	sbiw	r30, 0x01	; 1
 346:	39 e1       	ldi	r19, 0x19	; 25
 348:	30 83       	st	Z, r19
 34a:	31 97       	sbiw	r30, 0x01	; 1
 34c:	30 e2       	ldi	r19, 0x20	; 32
 34e:	30 83       	st	Z, r19
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	31 e2       	ldi	r19, 0x21	; 33
 354:	30 83       	st	Z, r19
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	20 83       	st	Z, r18
 35a:	31 97       	sbiw	r30, 0x01	; 1
 35c:	23 e2       	ldi	r18, 0x23	; 35
 35e:	20 83       	st	Z, r18
 360:	31 97       	sbiw	r30, 0x01	; 1
 362:	40 83       	st	Z, r20
 364:	31 97       	sbiw	r30, 0x01	; 1
 366:	50 83       	st	Z, r21
 368:	31 97       	sbiw	r30, 0x01	; 1
 36a:	26 e2       	ldi	r18, 0x26	; 38
 36c:	20 83       	st	Z, r18
 36e:	31 97       	sbiw	r30, 0x01	; 1
 370:	27 e2       	ldi	r18, 0x27	; 39
 372:	20 83       	st	Z, r18
 374:	31 97       	sbiw	r30, 0x01	; 1
 376:	28 e2       	ldi	r18, 0x28	; 40
 378:	20 83       	st	Z, r18
 37a:	31 97       	sbiw	r30, 0x01	; 1
 37c:	29 e2       	ldi	r18, 0x29	; 41
 37e:	20 83       	st	Z, r18
 380:	31 97       	sbiw	r30, 0x01	; 1
 382:	20 e3       	ldi	r18, 0x30	; 48
 384:	20 83       	st	Z, r18
 386:	31 97       	sbiw	r30, 0x01	; 1
 388:	21 e3       	ldi	r18, 0x31	; 49
 38a:	20 83       	st	Z, r18
 38c:	89 97       	sbiw	r24, 0x29	; 41
 38e:	08 95       	ret

00000390 <xPortStartScheduler>:
 390:	7f df       	rcall	.-258    	; 0x290 <prvSetupTimerInterrupt>
 392:	a0 91 51 08 	lds	r26, 0x0851	; 0x800851 <pxCurrentTCB>
 396:	b0 91 52 08 	lds	r27, 0x0852	; 0x800852 <pxCurrentTCB+0x1>
 39a:	cd 91       	ld	r28, X+
 39c:	cd bf       	out	0x3d, r28	; 61
 39e:	dd 91       	ld	r29, X+
 3a0:	de bf       	out	0x3e, r29	; 62
 3a2:	ff 91       	pop	r31
 3a4:	ef 91       	pop	r30
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	bf 91       	pop	r27
 3ac:	af 91       	pop	r26
 3ae:	9f 91       	pop	r25
 3b0:	8f 91       	pop	r24
 3b2:	7f 91       	pop	r23
 3b4:	6f 91       	pop	r22
 3b6:	5f 91       	pop	r21
 3b8:	4f 91       	pop	r20
 3ba:	3f 91       	pop	r19
 3bc:	2f 91       	pop	r18
 3be:	1f 91       	pop	r17
 3c0:	0f 91       	pop	r16
 3c2:	ff 90       	pop	r15
 3c4:	ef 90       	pop	r14
 3c6:	df 90       	pop	r13
 3c8:	cf 90       	pop	r12
 3ca:	bf 90       	pop	r11
 3cc:	af 90       	pop	r10
 3ce:	9f 90       	pop	r9
 3d0:	8f 90       	pop	r8
 3d2:	7f 90       	pop	r7
 3d4:	6f 90       	pop	r6
 3d6:	5f 90       	pop	r5
 3d8:	4f 90       	pop	r4
 3da:	3f 90       	pop	r3
 3dc:	2f 90       	pop	r2
 3de:	1f 90       	pop	r1
 3e0:	0f 90       	pop	r0
 3e2:	0c be       	out	0x3c, r0	; 60
 3e4:	0f 90       	pop	r0
 3e6:	0b be       	out	0x3b, r0	; 59
 3e8:	0f 90       	pop	r0
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	0f 90       	pop	r0
 3ee:	08 95       	ret
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	08 95       	ret

000003f4 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 3f4:	0f 92       	push	r0
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	f8 94       	cli
 3fa:	0f 92       	push	r0
 3fc:	0b b6       	in	r0, 0x3b	; 59
 3fe:	0f 92       	push	r0
 400:	0c b6       	in	r0, 0x3c	; 60
 402:	0f 92       	push	r0
 404:	1f 92       	push	r1
 406:	11 24       	eor	r1, r1
 408:	2f 92       	push	r2
 40a:	3f 92       	push	r3
 40c:	4f 92       	push	r4
 40e:	5f 92       	push	r5
 410:	6f 92       	push	r6
 412:	7f 92       	push	r7
 414:	8f 92       	push	r8
 416:	9f 92       	push	r9
 418:	af 92       	push	r10
 41a:	bf 92       	push	r11
 41c:	cf 92       	push	r12
 41e:	df 92       	push	r13
 420:	ef 92       	push	r14
 422:	ff 92       	push	r15
 424:	0f 93       	push	r16
 426:	1f 93       	push	r17
 428:	2f 93       	push	r18
 42a:	3f 93       	push	r19
 42c:	4f 93       	push	r20
 42e:	5f 93       	push	r21
 430:	6f 93       	push	r22
 432:	7f 93       	push	r23
 434:	8f 93       	push	r24
 436:	9f 93       	push	r25
 438:	af 93       	push	r26
 43a:	bf 93       	push	r27
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	ef 93       	push	r30
 442:	ff 93       	push	r31
 444:	a0 91 51 08 	lds	r26, 0x0851	; 0x800851 <pxCurrentTCB>
 448:	b0 91 52 08 	lds	r27, 0x0852	; 0x800852 <pxCurrentTCB+0x1>
 44c:	0d b6       	in	r0, 0x3d	; 61
 44e:	0d 92       	st	X+, r0
 450:	0e b6       	in	r0, 0x3e	; 62
 452:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 454:	c4 d4       	rcall	.+2440   	; 0xdde <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 456:	a0 91 51 08 	lds	r26, 0x0851	; 0x800851 <pxCurrentTCB>
 45a:	b0 91 52 08 	lds	r27, 0x0852	; 0x800852 <pxCurrentTCB+0x1>
 45e:	cd 91       	ld	r28, X+
 460:	cd bf       	out	0x3d, r28	; 61
 462:	dd 91       	ld	r29, X+
 464:	de bf       	out	0x3e, r29	; 62
 466:	ff 91       	pop	r31
 468:	ef 91       	pop	r30
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	bf 91       	pop	r27
 470:	af 91       	pop	r26
 472:	9f 91       	pop	r25
 474:	8f 91       	pop	r24
 476:	7f 91       	pop	r23
 478:	6f 91       	pop	r22
 47a:	5f 91       	pop	r21
 47c:	4f 91       	pop	r20
 47e:	3f 91       	pop	r19
 480:	2f 91       	pop	r18
 482:	1f 91       	pop	r17
 484:	0f 91       	pop	r16
 486:	ff 90       	pop	r15
 488:	ef 90       	pop	r14
 48a:	df 90       	pop	r13
 48c:	cf 90       	pop	r12
 48e:	bf 90       	pop	r11
 490:	af 90       	pop	r10
 492:	9f 90       	pop	r9
 494:	8f 90       	pop	r8
 496:	7f 90       	pop	r7
 498:	6f 90       	pop	r6
 49a:	5f 90       	pop	r5
 49c:	4f 90       	pop	r4
 49e:	3f 90       	pop	r3
 4a0:	2f 90       	pop	r2
 4a2:	1f 90       	pop	r1
 4a4:	0f 90       	pop	r0
 4a6:	0c be       	out	0x3c, r0	; 60
 4a8:	0f 90       	pop	r0
 4aa:	0b be       	out	0x3b, r0	; 59
 4ac:	0f 90       	pop	r0
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	0f 90       	pop	r0

	asm volatile ( "ret" );
 4b2:	08 95       	ret

000004b4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 4b4:	0f 92       	push	r0
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	f8 94       	cli
 4ba:	0f 92       	push	r0
 4bc:	0b b6       	in	r0, 0x3b	; 59
 4be:	0f 92       	push	r0
 4c0:	0c b6       	in	r0, 0x3c	; 60
 4c2:	0f 92       	push	r0
 4c4:	1f 92       	push	r1
 4c6:	11 24       	eor	r1, r1
 4c8:	2f 92       	push	r2
 4ca:	3f 92       	push	r3
 4cc:	4f 92       	push	r4
 4ce:	5f 92       	push	r5
 4d0:	6f 92       	push	r6
 4d2:	7f 92       	push	r7
 4d4:	8f 92       	push	r8
 4d6:	9f 92       	push	r9
 4d8:	af 92       	push	r10
 4da:	bf 92       	push	r11
 4dc:	cf 92       	push	r12
 4de:	df 92       	push	r13
 4e0:	ef 92       	push	r14
 4e2:	ff 92       	push	r15
 4e4:	0f 93       	push	r16
 4e6:	1f 93       	push	r17
 4e8:	2f 93       	push	r18
 4ea:	3f 93       	push	r19
 4ec:	4f 93       	push	r20
 4ee:	5f 93       	push	r21
 4f0:	6f 93       	push	r22
 4f2:	7f 93       	push	r23
 4f4:	8f 93       	push	r24
 4f6:	9f 93       	push	r25
 4f8:	af 93       	push	r26
 4fa:	bf 93       	push	r27
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	ef 93       	push	r30
 502:	ff 93       	push	r31
 504:	a0 91 51 08 	lds	r26, 0x0851	; 0x800851 <pxCurrentTCB>
 508:	b0 91 52 08 	lds	r27, 0x0852	; 0x800852 <pxCurrentTCB+0x1>
 50c:	0d b6       	in	r0, 0x3d	; 61
 50e:	0d 92       	st	X+, r0
 510:	0e b6       	in	r0, 0x3e	; 62
 512:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 514:	67 d2       	rcall	.+1230   	; 0x9e4 <xTaskIncrementTick>
 516:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 518:	62 d4       	rcall	.+2244   	; 0xdde <vTaskSwitchContext>
 51a:	a0 91 51 08 	lds	r26, 0x0851	; 0x800851 <pxCurrentTCB>
	}
	portRESTORE_CONTEXT();
 51e:	b0 91 52 08 	lds	r27, 0x0852	; 0x800852 <pxCurrentTCB+0x1>
 522:	cd 91       	ld	r28, X+
 524:	cd bf       	out	0x3d, r28	; 61
 526:	dd 91       	ld	r29, X+
 528:	de bf       	out	0x3e, r29	; 62
 52a:	ff 91       	pop	r31
 52c:	ef 91       	pop	r30
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	bf 91       	pop	r27
 534:	af 91       	pop	r26
 536:	9f 91       	pop	r25
 538:	8f 91       	pop	r24
 53a:	7f 91       	pop	r23
 53c:	6f 91       	pop	r22
 53e:	5f 91       	pop	r21
 540:	4f 91       	pop	r20
 542:	3f 91       	pop	r19
 544:	2f 91       	pop	r18
 546:	1f 91       	pop	r17
 548:	0f 91       	pop	r16
 54a:	ff 90       	pop	r15
 54c:	ef 90       	pop	r14
 54e:	df 90       	pop	r13
 550:	cf 90       	pop	r12
 552:	bf 90       	pop	r11
 554:	af 90       	pop	r10
 556:	9f 90       	pop	r9
 558:	8f 90       	pop	r8
 55a:	7f 90       	pop	r7
 55c:	6f 90       	pop	r6
 55e:	5f 90       	pop	r5
 560:	4f 90       	pop	r4
 562:	3f 90       	pop	r3
 564:	2f 90       	pop	r2
 566:	1f 90       	pop	r1
 568:	0f 90       	pop	r0
 56a:	0c be       	out	0x3c, r0	; 60
 56c:	0f 90       	pop	r0
 56e:	0b be       	out	0x3b, r0	; 59
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	08 95       	ret

00000578 <__vector_47>:

	asm volatile ( "ret" );
 578:	9d df       	rcall	.-198    	; 0x4b4 <vPortYieldFromTick>
//	void SIG_OUTPUT_COMPARE1A( void )
	void TIMER5_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER5_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 57a:	18 95       	reti

0000057c <prvResetNextTaskUnblockTime>:
    }
    taskEXIT_CRITICAL();
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
 57c:	e0 91 19 08 	lds	r30, 0x0819	; 0x800819 <pxDelayedTaskList>
 580:	f0 91 1a 08 	lds	r31, 0x081A	; 0x80081a <pxDelayedTaskList+0x1>
 584:	80 81       	ld	r24, Z
 586:	81 11       	cpse	r24, r1
 588:	07 c0       	rjmp	.+14     	; 0x598 <prvResetNextTaskUnblockTime+0x1c>
 58a:	8f ef       	ldi	r24, 0xFF	; 255
 58c:	9f ef       	ldi	r25, 0xFF	; 255
 58e:	90 93 fa 07 	sts	0x07FA, r25	; 0x8007fa <xNextTaskUnblockTime+0x1>
 592:	80 93 f9 07 	sts	0x07F9, r24	; 0x8007f9 <xNextTaskUnblockTime>
 596:	08 95       	ret
 598:	e0 91 19 08 	lds	r30, 0x0819	; 0x800819 <pxDelayedTaskList>
 59c:	f0 91 1a 08 	lds	r31, 0x081A	; 0x80081a <pxDelayedTaskList+0x1>
 5a0:	05 80       	ldd	r0, Z+5	; 0x05
 5a2:	f6 81       	ldd	r31, Z+6	; 0x06
 5a4:	e0 2d       	mov	r30, r0
 5a6:	80 81       	ld	r24, Z
 5a8:	91 81       	ldd	r25, Z+1	; 0x01
 5aa:	90 93 fa 07 	sts	0x07FA, r25	; 0x8007fa <xNextTaskUnblockTime+0x1>
 5ae:	80 93 f9 07 	sts	0x07F9, r24	; 0x8007f9 <xNextTaskUnblockTime>
 5b2:	08 95       	ret

000005b4 <prvInitialiseNewTask>:
 5b4:	6f 92       	push	r6
 5b6:	7f 92       	push	r7
 5b8:	8f 92       	push	r8
 5ba:	9f 92       	push	r9
 5bc:	af 92       	push	r10
 5be:	bf 92       	push	r11
 5c0:	cf 92       	push	r12
 5c2:	df 92       	push	r13
 5c4:	ef 92       	push	r14
 5c6:	0f 93       	push	r16
 5c8:	1f 93       	push	r17
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	cd b7       	in	r28, 0x3d	; 61
 5d0:	de b7       	in	r29, 0x3e	; 62
 5d2:	4c 01       	movw	r8, r24
 5d4:	f5 01       	movw	r30, r10
 5d6:	87 89       	ldd	r24, Z+23	; 0x17
 5d8:	90 8d       	ldd	r25, Z+24	; 0x18
 5da:	21 50       	subi	r18, 0x01	; 1
 5dc:	31 09       	sbc	r19, r1
 5de:	3c 01       	movw	r6, r24
 5e0:	62 0e       	add	r6, r18
 5e2:	73 1e       	adc	r7, r19
 5e4:	61 15       	cp	r22, r1
 5e6:	71 05       	cpc	r23, r1
 5e8:	89 f4       	brne	.+34     	; 0x60c <prvInitialiseNewTask+0x58>
 5ea:	15 c0       	rjmp	.+42     	; 0x616 <prvInitialiseNewTask+0x62>
 5ec:	82 2f       	mov	r24, r18
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	fb 01       	movw	r30, r22
 5f2:	e8 0f       	add	r30, r24
 5f4:	f9 1f       	adc	r31, r25
 5f6:	30 81       	ld	r19, Z
 5f8:	d5 01       	movw	r26, r10
 5fa:	a8 0f       	add	r26, r24
 5fc:	b9 1f       	adc	r27, r25
 5fe:	59 96       	adiw	r26, 0x19	; 25
 600:	3c 93       	st	X, r19
 602:	80 81       	ld	r24, Z
 604:	88 23       	and	r24, r24
 606:	29 f0       	breq	.+10     	; 0x612 <prvInitialiseNewTask+0x5e>
 608:	2f 5f       	subi	r18, 0xFF	; 255
 60a:	01 c0       	rjmp	.+2      	; 0x60e <prvInitialiseNewTask+0x5a>
 60c:	20 e0       	ldi	r18, 0x00	; 0
 60e:	28 30       	cpi	r18, 0x08	; 8
 610:	68 f3       	brcs	.-38     	; 0x5ec <prvInitialiseNewTask+0x38>
 612:	f5 01       	movw	r30, r10
 614:	10 a2       	std	Z+32, r1	; 0x20
 616:	f3 e0       	ldi	r31, 0x03	; 3
 618:	fe 15       	cp	r31, r14
 61a:	20 f4       	brcc	.+8      	; 0x624 <prvInitialiseNewTask+0x70>
 61c:	0f 2e       	mov	r0, r31
 61e:	f3 e0       	ldi	r31, 0x03	; 3
 620:	ef 2e       	mov	r14, r31
 622:	f0 2d       	mov	r31, r0
 624:	f5 01       	movw	r30, r10
 626:	e6 8a       	std	Z+22, r14	; 0x16
 628:	c5 01       	movw	r24, r10
 62a:	02 96       	adiw	r24, 0x02	; 2
 62c:	9c dd       	rcall	.-1224   	; 0x166 <vListInitialiseItem>
 62e:	c5 01       	movw	r24, r10
 630:	0c 96       	adiw	r24, 0x0c	; 12
 632:	99 dd       	rcall	.-1230   	; 0x166 <vListInitialiseItem>
 634:	f5 01       	movw	r30, r10
 636:	b1 86       	std	Z+9, r11	; 0x09
 638:	a0 86       	std	Z+8, r10	; 0x08
 63a:	84 e0       	ldi	r24, 0x04	; 4
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	8e 19       	sub	r24, r14
 640:	91 09       	sbc	r25, r1
 642:	95 87       	std	Z+13, r25	; 0x0d
 644:	84 87       	std	Z+12, r24	; 0x0c
 646:	b3 8a       	std	Z+19, r11	; 0x13
 648:	a2 8a       	std	Z+18, r10	; 0x12
 64a:	a8 01       	movw	r20, r16
 64c:	b4 01       	movw	r22, r8
 64e:	c3 01       	movw	r24, r6
 650:	2d de       	rcall	.-934    	; 0x2ac <pxPortInitialiseStack>
 652:	f5 01       	movw	r30, r10
 654:	91 83       	std	Z+1, r25	; 0x01
 656:	80 83       	st	Z, r24
 658:	c1 14       	cp	r12, r1
 65a:	d1 04       	cpc	r13, r1
 65c:	19 f0       	breq	.+6      	; 0x664 <prvInitialiseNewTask+0xb0>
 65e:	f6 01       	movw	r30, r12
 660:	b1 82       	std	Z+1, r11	; 0x01
 662:	a0 82       	st	Z, r10
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	1f 91       	pop	r17
 66a:	0f 91       	pop	r16
 66c:	ef 90       	pop	r14
 66e:	df 90       	pop	r13
 670:	cf 90       	pop	r12
 672:	bf 90       	pop	r11
 674:	af 90       	pop	r10
 676:	9f 90       	pop	r9
 678:	8f 90       	pop	r8
 67a:	7f 90       	pop	r7
 67c:	6f 90       	pop	r6
 67e:	08 95       	ret

00000680 <prvInitialiseTaskLists>:
 680:	cf 93       	push	r28
 682:	c0 e0       	ldi	r28, 0x00	; 0
 684:	0f c0       	rjmp	.+30     	; 0x6a4 <prvInitialiseTaskLists+0x24>
 686:	8c 2f       	mov	r24, r28
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	9c 01       	movw	r18, r24
 68c:	22 0f       	add	r18, r18
 68e:	33 1f       	adc	r19, r19
 690:	22 0f       	add	r18, r18
 692:	33 1f       	adc	r19, r19
 694:	22 0f       	add	r18, r18
 696:	33 1f       	adc	r19, r19
 698:	82 0f       	add	r24, r18
 69a:	93 1f       	adc	r25, r19
 69c:	83 5d       	subi	r24, 0xD3	; 211
 69e:	97 4f       	sbci	r25, 0xF7	; 247
 6a0:	54 dd       	rcall	.-1368   	; 0x14a <vListInitialise>
 6a2:	cf 5f       	subi	r28, 0xFF	; 255
 6a4:	c4 30       	cpi	r28, 0x04	; 4
 6a6:	78 f3       	brcs	.-34     	; 0x686 <prvInitialiseTaskLists+0x6>
 6a8:	84 e2       	ldi	r24, 0x24	; 36
 6aa:	98 e0       	ldi	r25, 0x08	; 8
 6ac:	4e dd       	rcall	.-1380   	; 0x14a <vListInitialise>
 6ae:	8b e1       	ldi	r24, 0x1B	; 27
 6b0:	98 e0       	ldi	r25, 0x08	; 8
 6b2:	4b dd       	rcall	.-1386   	; 0x14a <vListInitialise>
 6b4:	8e e0       	ldi	r24, 0x0E	; 14
 6b6:	98 e0       	ldi	r25, 0x08	; 8
 6b8:	48 dd       	rcall	.-1392   	; 0x14a <vListInitialise>
 6ba:	85 e0       	ldi	r24, 0x05	; 5
 6bc:	98 e0       	ldi	r25, 0x08	; 8
 6be:	45 dd       	rcall	.-1398   	; 0x14a <vListInitialise>
 6c0:	84 e2       	ldi	r24, 0x24	; 36
 6c2:	98 e0       	ldi	r25, 0x08	; 8
 6c4:	90 93 1a 08 	sts	0x081A, r25	; 0x80081a <pxDelayedTaskList+0x1>
 6c8:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <pxDelayedTaskList>
 6cc:	8b e1       	ldi	r24, 0x1B	; 27
 6ce:	98 e0       	ldi	r25, 0x08	; 8
 6d0:	90 93 18 08 	sts	0x0818, r25	; 0x800818 <pxOverflowDelayedTaskList+0x1>
 6d4:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <pxOverflowDelayedTaskList>
 6d8:	cf 91       	pop	r28
 6da:	08 95       	ret

000006dc <prvAddNewTaskToReadyList>:
 6dc:	cf 93       	push	r28
 6de:	df 93       	push	r29
 6e0:	ec 01       	movw	r28, r24
 6e2:	0f b6       	in	r0, 0x3f	; 63
 6e4:	f8 94       	cli
 6e6:	0f 92       	push	r0
 6e8:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <uxCurrentNumberOfTasks>
 6ec:	8f 5f       	subi	r24, 0xFF	; 255
 6ee:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <uxCurrentNumberOfTasks>
 6f2:	80 91 51 08 	lds	r24, 0x0851	; 0x800851 <pxCurrentTCB>
 6f6:	90 91 52 08 	lds	r25, 0x0852	; 0x800852 <pxCurrentTCB+0x1>
 6fa:	89 2b       	or	r24, r25
 6fc:	51 f4       	brne	.+20     	; 0x712 <prvAddNewTaskToReadyList+0x36>
 6fe:	d0 93 52 08 	sts	0x0852, r29	; 0x800852 <pxCurrentTCB+0x1>
 702:	c0 93 51 08 	sts	0x0851, r28	; 0x800851 <pxCurrentTCB>
 706:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <uxCurrentNumberOfTasks>
 70a:	81 30       	cpi	r24, 0x01	; 1
 70c:	91 f4       	brne	.+36     	; 0x732 <prvAddNewTaskToReadyList+0x56>
 70e:	b8 df       	rcall	.-144    	; 0x680 <prvInitialiseTaskLists>
 710:	10 c0       	rjmp	.+32     	; 0x732 <prvAddNewTaskToReadyList+0x56>
 712:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <xSchedulerRunning>
 716:	81 11       	cpse	r24, r1
 718:	0c c0       	rjmp	.+24     	; 0x732 <prvAddNewTaskToReadyList+0x56>
 71a:	e0 91 51 08 	lds	r30, 0x0851	; 0x800851 <pxCurrentTCB>
 71e:	f0 91 52 08 	lds	r31, 0x0852	; 0x800852 <pxCurrentTCB+0x1>
 722:	96 89       	ldd	r25, Z+22	; 0x16
 724:	8e 89       	ldd	r24, Y+22	; 0x16
 726:	89 17       	cp	r24, r25
 728:	20 f0       	brcs	.+8      	; 0x732 <prvAddNewTaskToReadyList+0x56>
 72a:	d0 93 52 08 	sts	0x0852, r29	; 0x800852 <pxCurrentTCB+0x1>
 72e:	c0 93 51 08 	sts	0x0851, r28	; 0x800851 <pxCurrentTCB>
 732:	80 91 fb 07 	lds	r24, 0x07FB	; 0x8007fb <uxTaskNumber>
 736:	8f 5f       	subi	r24, 0xFF	; 255
 738:	80 93 fb 07 	sts	0x07FB, r24	; 0x8007fb <uxTaskNumber>
 73c:	8e 89       	ldd	r24, Y+22	; 0x16
 73e:	90 91 01 08 	lds	r25, 0x0801	; 0x800801 <uxTopReadyPriority>
 742:	98 17       	cp	r25, r24
 744:	10 f4       	brcc	.+4      	; 0x74a <prvAddNewTaskToReadyList+0x6e>
 746:	80 93 01 08 	sts	0x0801, r24	; 0x800801 <uxTopReadyPriority>
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	fc 01       	movw	r30, r24
 74e:	ee 0f       	add	r30, r30
 750:	ff 1f       	adc	r31, r31
 752:	ee 0f       	add	r30, r30
 754:	ff 1f       	adc	r31, r31
 756:	ee 0f       	add	r30, r30
 758:	ff 1f       	adc	r31, r31
 75a:	8e 0f       	add	r24, r30
 75c:	9f 1f       	adc	r25, r31
 75e:	fc 01       	movw	r30, r24
 760:	e3 5d       	subi	r30, 0xD3	; 211
 762:	f7 4f       	sbci	r31, 0xF7	; 247
 764:	01 80       	ldd	r0, Z+1	; 0x01
 766:	f2 81       	ldd	r31, Z+2	; 0x02
 768:	e0 2d       	mov	r30, r0
 76a:	fd 83       	std	Y+5, r31	; 0x05
 76c:	ec 83       	std	Y+4, r30	; 0x04
 76e:	84 81       	ldd	r24, Z+4	; 0x04
 770:	95 81       	ldd	r25, Z+5	; 0x05
 772:	9f 83       	std	Y+7, r25	; 0x07
 774:	8e 83       	std	Y+6, r24	; 0x06
 776:	a4 81       	ldd	r26, Z+4	; 0x04
 778:	b5 81       	ldd	r27, Z+5	; 0x05
 77a:	ce 01       	movw	r24, r28
 77c:	02 96       	adiw	r24, 0x02	; 2
 77e:	13 96       	adiw	r26, 0x03	; 3
 780:	9c 93       	st	X, r25
 782:	8e 93       	st	-X, r24
 784:	12 97       	sbiw	r26, 0x02	; 2
 786:	95 83       	std	Z+5, r25	; 0x05
 788:	84 83       	std	Z+4, r24	; 0x04
 78a:	ee 89       	ldd	r30, Y+22	; 0x16
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	cf 01       	movw	r24, r30
 790:	88 0f       	add	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	88 0f       	add	r24, r24
 796:	99 1f       	adc	r25, r25
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	e8 0f       	add	r30, r24
 79e:	f9 1f       	adc	r31, r25
 7a0:	e3 5d       	subi	r30, 0xD3	; 211
 7a2:	f7 4f       	sbci	r31, 0xF7	; 247
 7a4:	fb 87       	std	Y+11, r31	; 0x0b
 7a6:	ea 87       	std	Y+10, r30	; 0x0a
 7a8:	80 81       	ld	r24, Z
 7aa:	8f 5f       	subi	r24, 0xFF	; 255
 7ac:	80 83       	st	Z, r24
 7ae:	0f 90       	pop	r0
 7b0:	0f be       	out	0x3f, r0	; 63
 7b2:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <xSchedulerRunning>
 7b6:	88 23       	and	r24, r24
 7b8:	49 f0       	breq	.+18     	; 0x7cc <prvAddNewTaskToReadyList+0xf0>
 7ba:	e0 91 51 08 	lds	r30, 0x0851	; 0x800851 <pxCurrentTCB>
 7be:	f0 91 52 08 	lds	r31, 0x0852	; 0x800852 <pxCurrentTCB+0x1>
 7c2:	96 89       	ldd	r25, Z+22	; 0x16
 7c4:	8e 89       	ldd	r24, Y+22	; 0x16
 7c6:	98 17       	cp	r25, r24
 7c8:	08 f4       	brcc	.+2      	; 0x7cc <prvAddNewTaskToReadyList+0xf0>
 7ca:	14 de       	rcall	.-984    	; 0x3f4 <vPortYield>
 7cc:	df 91       	pop	r29
 7ce:	cf 91       	pop	r28
 7d0:	08 95       	ret

000007d2 <prvAddCurrentTaskToDelayedList>:
 7d2:	ff 92       	push	r15
 7d4:	0f 93       	push	r16
 7d6:	1f 93       	push	r17
 7d8:	cf 93       	push	r28
 7da:	df 93       	push	r29
 7dc:	ec 01       	movw	r28, r24
 7de:	f6 2e       	mov	r15, r22
 7e0:	00 91 02 08 	lds	r16, 0x0802	; 0x800802 <xTickCount>
 7e4:	10 91 03 08 	lds	r17, 0x0803	; 0x800803 <xTickCount+0x1>
 7e8:	80 91 51 08 	lds	r24, 0x0851	; 0x800851 <pxCurrentTCB>
 7ec:	90 91 52 08 	lds	r25, 0x0852	; 0x800852 <pxCurrentTCB+0x1>
 7f0:	02 96       	adiw	r24, 0x02	; 2
 7f2:	ee dc       	rcall	.-1572   	; 0x1d0 <uxListRemove>
 7f4:	cf 3f       	cpi	r28, 0xFF	; 255
 7f6:	8f ef       	ldi	r24, 0xFF	; 255
 7f8:	d8 07       	cpc	r29, r24
 7fa:	b1 f5       	brne	.+108    	; 0x868 <prvAddCurrentTaskToDelayedList+0x96>
 7fc:	ff 20       	and	r15, r15
 7fe:	a1 f1       	breq	.+104    	; 0x868 <prvAddCurrentTaskToDelayedList+0x96>
 800:	e5 e0       	ldi	r30, 0x05	; 5
 802:	f8 e0       	ldi	r31, 0x08	; 8
 804:	a1 81       	ldd	r26, Z+1	; 0x01
 806:	b2 81       	ldd	r27, Z+2	; 0x02
 808:	c0 91 51 08 	lds	r28, 0x0851	; 0x800851 <pxCurrentTCB>
 80c:	d0 91 52 08 	lds	r29, 0x0852	; 0x800852 <pxCurrentTCB+0x1>
 810:	bd 83       	std	Y+5, r27	; 0x05
 812:	ac 83       	std	Y+4, r26	; 0x04
 814:	c0 91 51 08 	lds	r28, 0x0851	; 0x800851 <pxCurrentTCB>
 818:	d0 91 52 08 	lds	r29, 0x0852	; 0x800852 <pxCurrentTCB+0x1>
 81c:	14 96       	adiw	r26, 0x04	; 4
 81e:	8d 91       	ld	r24, X+
 820:	9c 91       	ld	r25, X
 822:	15 97       	sbiw	r26, 0x05	; 5
 824:	9f 83       	std	Y+7, r25	; 0x07
 826:	8e 83       	std	Y+6, r24	; 0x06
 828:	14 96       	adiw	r26, 0x04	; 4
 82a:	cd 91       	ld	r28, X+
 82c:	dc 91       	ld	r29, X
 82e:	15 97       	sbiw	r26, 0x05	; 5
 830:	80 91 51 08 	lds	r24, 0x0851	; 0x800851 <pxCurrentTCB>
 834:	90 91 52 08 	lds	r25, 0x0852	; 0x800852 <pxCurrentTCB+0x1>
 838:	02 96       	adiw	r24, 0x02	; 2
 83a:	9b 83       	std	Y+3, r25	; 0x03
 83c:	8a 83       	std	Y+2, r24	; 0x02
 83e:	80 91 51 08 	lds	r24, 0x0851	; 0x800851 <pxCurrentTCB>
 842:	90 91 52 08 	lds	r25, 0x0852	; 0x800852 <pxCurrentTCB+0x1>
 846:	02 96       	adiw	r24, 0x02	; 2
 848:	15 96       	adiw	r26, 0x05	; 5
 84a:	9c 93       	st	X, r25
 84c:	8e 93       	st	-X, r24
 84e:	14 97       	sbiw	r26, 0x04	; 4
 850:	a0 91 51 08 	lds	r26, 0x0851	; 0x800851 <pxCurrentTCB>
 854:	b0 91 52 08 	lds	r27, 0x0852	; 0x800852 <pxCurrentTCB+0x1>
 858:	1b 96       	adiw	r26, 0x0b	; 11
 85a:	fc 93       	st	X, r31
 85c:	ee 93       	st	-X, r30
 85e:	1a 97       	sbiw	r26, 0x0a	; 10
 860:	80 81       	ld	r24, Z
 862:	8f 5f       	subi	r24, 0xFF	; 255
 864:	80 83       	st	Z, r24
 866:	2d c0       	rjmp	.+90     	; 0x8c2 <prvAddCurrentTaskToDelayedList+0xf0>
 868:	c0 0f       	add	r28, r16
 86a:	d1 1f       	adc	r29, r17
 86c:	e0 91 51 08 	lds	r30, 0x0851	; 0x800851 <pxCurrentTCB>
 870:	f0 91 52 08 	lds	r31, 0x0852	; 0x800852 <pxCurrentTCB+0x1>
 874:	d3 83       	std	Z+3, r29	; 0x03
 876:	c2 83       	std	Z+2, r28	; 0x02
 878:	c0 17       	cp	r28, r16
 87a:	d1 07       	cpc	r29, r17
 87c:	60 f4       	brcc	.+24     	; 0x896 <prvAddCurrentTaskToDelayedList+0xc4>
 87e:	60 91 51 08 	lds	r22, 0x0851	; 0x800851 <pxCurrentTCB>
 882:	70 91 52 08 	lds	r23, 0x0852	; 0x800852 <pxCurrentTCB+0x1>
 886:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <pxOverflowDelayedTaskList>
 88a:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <pxOverflowDelayedTaskList+0x1>
 88e:	6e 5f       	subi	r22, 0xFE	; 254
 890:	7f 4f       	sbci	r23, 0xFF	; 255
 892:	6d dc       	rcall	.-1830   	; 0x16e <vListInsert>
 894:	16 c0       	rjmp	.+44     	; 0x8c2 <prvAddCurrentTaskToDelayedList+0xf0>
 896:	60 91 51 08 	lds	r22, 0x0851	; 0x800851 <pxCurrentTCB>
 89a:	70 91 52 08 	lds	r23, 0x0852	; 0x800852 <pxCurrentTCB+0x1>
 89e:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <pxDelayedTaskList>
 8a2:	90 91 1a 08 	lds	r25, 0x081A	; 0x80081a <pxDelayedTaskList+0x1>
 8a6:	6e 5f       	subi	r22, 0xFE	; 254
 8a8:	7f 4f       	sbci	r23, 0xFF	; 255
 8aa:	61 dc       	rcall	.-1854   	; 0x16e <vListInsert>
 8ac:	80 91 f9 07 	lds	r24, 0x07F9	; 0x8007f9 <xNextTaskUnblockTime>
 8b0:	90 91 fa 07 	lds	r25, 0x07FA	; 0x8007fa <xNextTaskUnblockTime+0x1>
 8b4:	c8 17       	cp	r28, r24
 8b6:	d9 07       	cpc	r29, r25
 8b8:	20 f4       	brcc	.+8      	; 0x8c2 <prvAddCurrentTaskToDelayedList+0xf0>
 8ba:	d0 93 fa 07 	sts	0x07FA, r29	; 0x8007fa <xNextTaskUnblockTime+0x1>
 8be:	c0 93 f9 07 	sts	0x07F9, r28	; 0x8007f9 <xNextTaskUnblockTime>
 8c2:	df 91       	pop	r29
 8c4:	cf 91       	pop	r28
 8c6:	1f 91       	pop	r17
 8c8:	0f 91       	pop	r16
 8ca:	ff 90       	pop	r15
 8cc:	08 95       	ret

000008ce <prvIdleTask>:
 8ce:	80 91 2d 08 	lds	r24, 0x082D	; 0x80082d <pxReadyTasksLists>
 8d2:	82 30       	cpi	r24, 0x02	; 2
 8d4:	08 f0       	brcs	.+2      	; 0x8d8 <prvIdleTask+0xa>
 8d6:	8e dd       	rcall	.-1252   	; 0x3f4 <vPortYield>
 8d8:	e8 d2       	rcall	.+1488   	; 0xeaa <vApplicationIdleHook>
 8da:	f9 cf       	rjmp	.-14     	; 0x8ce <prvIdleTask>

000008dc <xTaskCreate>:
 8dc:	2f 92       	push	r2
 8de:	3f 92       	push	r3
 8e0:	4f 92       	push	r4
 8e2:	5f 92       	push	r5
 8e4:	6f 92       	push	r6
 8e6:	7f 92       	push	r7
 8e8:	8f 92       	push	r8
 8ea:	9f 92       	push	r9
 8ec:	af 92       	push	r10
 8ee:	bf 92       	push	r11
 8f0:	cf 92       	push	r12
 8f2:	df 92       	push	r13
 8f4:	ef 92       	push	r14
 8f6:	ff 92       	push	r15
 8f8:	0f 93       	push	r16
 8fa:	1f 93       	push	r17
 8fc:	cf 93       	push	r28
 8fe:	df 93       	push	r29
 900:	3c 01       	movw	r6, r24
 902:	1b 01       	movw	r2, r22
 904:	5a 01       	movw	r10, r20
 906:	29 01       	movw	r4, r18
 908:	ca 01       	movw	r24, r20
 90a:	89 dc       	rcall	.-1774   	; 0x21e <pvPortMalloc>
 90c:	6c 01       	movw	r12, r24
 90e:	89 2b       	or	r24, r25
 910:	89 f0       	breq	.+34     	; 0x934 <xTaskCreate+0x58>
 912:	86 e2       	ldi	r24, 0x26	; 38
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	83 dc       	rcall	.-1786   	; 0x21e <pvPortMalloc>
 918:	ec 01       	movw	r28, r24
 91a:	89 2b       	or	r24, r25
 91c:	41 f0       	breq	.+16     	; 0x92e <xTaskCreate+0x52>
 91e:	86 e2       	ldi	r24, 0x26	; 38
 920:	fe 01       	movw	r30, r28
 922:	11 92       	st	Z+, r1
 924:	8a 95       	dec	r24
 926:	e9 f7       	brne	.-6      	; 0x922 <xTaskCreate+0x46>
 928:	d8 8e       	std	Y+24, r13	; 0x18
 92a:	cf 8a       	std	Y+23, r12	; 0x17
 92c:	05 c0       	rjmp	.+10     	; 0x938 <xTaskCreate+0x5c>
 92e:	c6 01       	movw	r24, r12
 930:	ae dc       	rcall	.-1700   	; 0x28e <vPortFree>
 932:	02 c0       	rjmp	.+4      	; 0x938 <xTaskCreate+0x5c>
 934:	c0 e0       	ldi	r28, 0x00	; 0
 936:	d0 e0       	ldi	r29, 0x00	; 0
 938:	20 97       	sbiw	r28, 0x00	; 0
 93a:	81 f0       	breq	.+32     	; 0x95c <xTaskCreate+0x80>
 93c:	95 01       	movw	r18, r10
 93e:	40 e0       	ldi	r20, 0x00	; 0
 940:	50 e0       	ldi	r21, 0x00	; 0
 942:	81 2c       	mov	r8, r1
 944:	91 2c       	mov	r9, r1
 946:	5e 01       	movw	r10, r28
 948:	67 01       	movw	r12, r14
 94a:	e0 2e       	mov	r14, r16
 94c:	82 01       	movw	r16, r4
 94e:	b1 01       	movw	r22, r2
 950:	c3 01       	movw	r24, r6
 952:	30 de       	rcall	.-928    	; 0x5b4 <prvInitialiseNewTask>
 954:	ce 01       	movw	r24, r28
 956:	c2 de       	rcall	.-636    	; 0x6dc <prvAddNewTaskToReadyList>
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	01 c0       	rjmp	.+2      	; 0x95e <xTaskCreate+0x82>
 95c:	8f ef       	ldi	r24, 0xFF	; 255
 95e:	df 91       	pop	r29
 960:	cf 91       	pop	r28
 962:	1f 91       	pop	r17
 964:	0f 91       	pop	r16
 966:	ff 90       	pop	r15
 968:	ef 90       	pop	r14
 96a:	df 90       	pop	r13
 96c:	cf 90       	pop	r12
 96e:	bf 90       	pop	r11
 970:	af 90       	pop	r10
 972:	9f 90       	pop	r9
 974:	8f 90       	pop	r8
 976:	7f 90       	pop	r7
 978:	6f 90       	pop	r6
 97a:	5f 90       	pop	r5
 97c:	4f 90       	pop	r4
 97e:	3f 90       	pop	r3
 980:	2f 90       	pop	r2
 982:	08 95       	ret

00000984 <vTaskStartScheduler>:
 984:	ef 92       	push	r14
 986:	ff 92       	push	r15
 988:	0f 93       	push	r16
 98a:	0f 2e       	mov	r0, r31
 98c:	f7 ef       	ldi	r31, 0xF7	; 247
 98e:	ef 2e       	mov	r14, r31
 990:	f7 e0       	ldi	r31, 0x07	; 7
 992:	ff 2e       	mov	r15, r31
 994:	f0 2d       	mov	r31, r0
 996:	00 e0       	ldi	r16, 0x00	; 0
 998:	20 e0       	ldi	r18, 0x00	; 0
 99a:	30 e0       	ldi	r19, 0x00	; 0
 99c:	45 e5       	ldi	r20, 0x55	; 85
 99e:	50 e0       	ldi	r21, 0x00	; 0
 9a0:	61 e0       	ldi	r22, 0x01	; 1
 9a2:	72 e0       	ldi	r23, 0x02	; 2
 9a4:	87 e6       	ldi	r24, 0x67	; 103
 9a6:	94 e0       	ldi	r25, 0x04	; 4
 9a8:	99 df       	rcall	.-206    	; 0x8dc <xTaskCreate>
 9aa:	81 30       	cpi	r24, 0x01	; 1
 9ac:	79 f4       	brne	.+30     	; 0x9cc <vTaskStartScheduler+0x48>
 9ae:	f8 94       	cli
 9b0:	8f ef       	ldi	r24, 0xFF	; 255
 9b2:	9f ef       	ldi	r25, 0xFF	; 255
 9b4:	90 93 fa 07 	sts	0x07FA, r25	; 0x8007fa <xNextTaskUnblockTime+0x1>
 9b8:	80 93 f9 07 	sts	0x07F9, r24	; 0x8007f9 <xNextTaskUnblockTime>
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <xSchedulerRunning>
 9c2:	10 92 03 08 	sts	0x0803, r1	; 0x800803 <xTickCount+0x1>
 9c6:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <xTickCount>
 9ca:	e2 dc       	rcall	.-1596   	; 0x390 <xPortStartScheduler>
 9cc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 9d0:	0f 91       	pop	r16
 9d2:	ff 90       	pop	r15
 9d4:	ef 90       	pop	r14
 9d6:	08 95       	ret

000009d8 <vTaskSuspendAll>:
 9d8:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <uxSchedulerSuspended>
 9dc:	8f 5f       	subi	r24, 0xFF	; 255
 9de:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <uxSchedulerSuspended>
 9e2:	08 95       	ret

000009e4 <xTaskIncrementTick>:
 9e4:	0f 93       	push	r16
 9e6:	1f 93       	push	r17
 9e8:	cf 93       	push	r28
 9ea:	df 93       	push	r29
 9ec:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <uxSchedulerSuspended>
 9f0:	81 11       	cpse	r24, r1
 9f2:	00 c1       	rjmp	.+512    	; 0xbf4 <xTaskIncrementTick+0x210>
 9f4:	c0 91 02 08 	lds	r28, 0x0802	; 0x800802 <xTickCount>
 9f8:	d0 91 03 08 	lds	r29, 0x0803	; 0x800803 <xTickCount+0x1>
 9fc:	8e 01       	movw	r16, r28
 9fe:	0f 5f       	subi	r16, 0xFF	; 255
 a00:	1f 4f       	sbci	r17, 0xFF	; 255
 a02:	10 93 03 08 	sts	0x0803, r17	; 0x800803 <xTickCount+0x1>
 a06:	00 93 02 08 	sts	0x0802, r16	; 0x800802 <xTickCount>
 a0a:	01 15       	cp	r16, r1
 a0c:	11 05       	cpc	r17, r1
 a0e:	b1 f4       	brne	.+44     	; 0xa3c <xTaskIncrementTick+0x58>
 a10:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <pxDelayedTaskList>
 a14:	90 91 1a 08 	lds	r25, 0x081A	; 0x80081a <pxDelayedTaskList+0x1>
 a18:	20 91 17 08 	lds	r18, 0x0817	; 0x800817 <pxOverflowDelayedTaskList>
 a1c:	30 91 18 08 	lds	r19, 0x0818	; 0x800818 <pxOverflowDelayedTaskList+0x1>
 a20:	30 93 1a 08 	sts	0x081A, r19	; 0x80081a <pxDelayedTaskList+0x1>
 a24:	20 93 19 08 	sts	0x0819, r18	; 0x800819 <pxDelayedTaskList>
 a28:	90 93 18 08 	sts	0x0818, r25	; 0x800818 <pxOverflowDelayedTaskList+0x1>
 a2c:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <pxOverflowDelayedTaskList>
 a30:	80 91 fc 07 	lds	r24, 0x07FC	; 0x8007fc <xNumOfOverflows>
 a34:	8f 5f       	subi	r24, 0xFF	; 255
 a36:	80 93 fc 07 	sts	0x07FC, r24	; 0x8007fc <xNumOfOverflows>
 a3a:	a0 dd       	rcall	.-1216   	; 0x57c <prvResetNextTaskUnblockTime>
 a3c:	80 91 f9 07 	lds	r24, 0x07F9	; 0x8007f9 <xNextTaskUnblockTime>
 a40:	90 91 fa 07 	lds	r25, 0x07FA	; 0x8007fa <xNextTaskUnblockTime+0x1>
 a44:	08 17       	cp	r16, r24
 a46:	19 07       	cpc	r17, r25
 a48:	20 f4       	brcc	.+8      	; 0xa52 <xTaskIncrementTick+0x6e>
 a4a:	80 e0       	ldi	r24, 0x00	; 0
 a4c:	b8 c0       	rjmp	.+368    	; 0xbbe <xTaskIncrementTick+0x1da>
 a4e:	81 e0       	ldi	r24, 0x01	; 1
 a50:	01 c0       	rjmp	.+2      	; 0xa54 <xTaskIncrementTick+0x70>
 a52:	80 e0       	ldi	r24, 0x00	; 0
 a54:	e0 91 19 08 	lds	r30, 0x0819	; 0x800819 <pxDelayedTaskList>
 a58:	f0 91 1a 08 	lds	r31, 0x081A	; 0x80081a <pxDelayedTaskList+0x1>
 a5c:	90 81       	ld	r25, Z
 a5e:	91 11       	cpse	r25, r1
 a60:	07 c0       	rjmp	.+14     	; 0xa70 <xTaskIncrementTick+0x8c>
 a62:	2f ef       	ldi	r18, 0xFF	; 255
 a64:	3f ef       	ldi	r19, 0xFF	; 255
 a66:	30 93 fa 07 	sts	0x07FA, r19	; 0x8007fa <xNextTaskUnblockTime+0x1>
 a6a:	20 93 f9 07 	sts	0x07F9, r18	; 0x8007f9 <xNextTaskUnblockTime>
 a6e:	a7 c0       	rjmp	.+334    	; 0xbbe <xTaskIncrementTick+0x1da>
 a70:	e0 91 19 08 	lds	r30, 0x0819	; 0x800819 <pxDelayedTaskList>
 a74:	f0 91 1a 08 	lds	r31, 0x081A	; 0x80081a <pxDelayedTaskList+0x1>
 a78:	05 80       	ldd	r0, Z+5	; 0x05
 a7a:	f6 81       	ldd	r31, Z+6	; 0x06
 a7c:	e0 2d       	mov	r30, r0
 a7e:	06 80       	ldd	r0, Z+6	; 0x06
 a80:	f7 81       	ldd	r31, Z+7	; 0x07
 a82:	e0 2d       	mov	r30, r0
 a84:	22 81       	ldd	r18, Z+2	; 0x02
 a86:	33 81       	ldd	r19, Z+3	; 0x03
 a88:	02 17       	cp	r16, r18
 a8a:	13 07       	cpc	r17, r19
 a8c:	28 f4       	brcc	.+10     	; 0xa98 <xTaskIncrementTick+0xb4>
 a8e:	30 93 fa 07 	sts	0x07FA, r19	; 0x8007fa <xNextTaskUnblockTime+0x1>
 a92:	20 93 f9 07 	sts	0x07F9, r18	; 0x8007f9 <xNextTaskUnblockTime>
 a96:	93 c0       	rjmp	.+294    	; 0xbbe <xTaskIncrementTick+0x1da>
 a98:	a2 85       	ldd	r26, Z+10	; 0x0a
 a9a:	b3 85       	ldd	r27, Z+11	; 0x0b
 a9c:	24 81       	ldd	r18, Z+4	; 0x04
 a9e:	35 81       	ldd	r19, Z+5	; 0x05
 aa0:	46 81       	ldd	r20, Z+6	; 0x06
 aa2:	57 81       	ldd	r21, Z+7	; 0x07
 aa4:	e9 01       	movw	r28, r18
 aa6:	5d 83       	std	Y+5, r21	; 0x05
 aa8:	4c 83       	std	Y+4, r20	; 0x04
 aaa:	26 81       	ldd	r18, Z+6	; 0x06
 aac:	37 81       	ldd	r19, Z+7	; 0x07
 aae:	44 81       	ldd	r20, Z+4	; 0x04
 ab0:	55 81       	ldd	r21, Z+5	; 0x05
 ab2:	e9 01       	movw	r28, r18
 ab4:	5b 83       	std	Y+3, r21	; 0x03
 ab6:	4a 83       	std	Y+2, r20	; 0x02
 ab8:	11 96       	adiw	r26, 0x01	; 1
 aba:	2d 91       	ld	r18, X+
 abc:	3c 91       	ld	r19, X
 abe:	12 97       	sbiw	r26, 0x02	; 2
 ac0:	af 01       	movw	r20, r30
 ac2:	4e 5f       	subi	r20, 0xFE	; 254
 ac4:	5f 4f       	sbci	r21, 0xFF	; 255
 ac6:	24 17       	cp	r18, r20
 ac8:	35 07       	cpc	r19, r21
 aca:	31 f4       	brne	.+12     	; 0xad8 <xTaskIncrementTick+0xf4>
 acc:	26 81       	ldd	r18, Z+6	; 0x06
 ace:	37 81       	ldd	r19, Z+7	; 0x07
 ad0:	12 96       	adiw	r26, 0x02	; 2
 ad2:	3c 93       	st	X, r19
 ad4:	2e 93       	st	-X, r18
 ad6:	11 97       	sbiw	r26, 0x01	; 1
 ad8:	13 86       	std	Z+11, r1	; 0x0b
 ada:	12 86       	std	Z+10, r1	; 0x0a
 adc:	9c 91       	ld	r25, X
 ade:	91 50       	subi	r25, 0x01	; 1
 ae0:	9c 93       	st	X, r25
 ae2:	a4 89       	ldd	r26, Z+20	; 0x14
 ae4:	b5 89       	ldd	r27, Z+21	; 0x15
 ae6:	10 97       	sbiw	r26, 0x00	; 0
 ae8:	19 f1       	breq	.+70     	; 0xb30 <xTaskIncrementTick+0x14c>
 aea:	26 85       	ldd	r18, Z+14	; 0x0e
 aec:	37 85       	ldd	r19, Z+15	; 0x0f
 aee:	60 89       	ldd	r22, Z+16	; 0x10
 af0:	71 89       	ldd	r23, Z+17	; 0x11
 af2:	e9 01       	movw	r28, r18
 af4:	7d 83       	std	Y+5, r23	; 0x05
 af6:	6c 83       	std	Y+4, r22	; 0x04
 af8:	20 89       	ldd	r18, Z+16	; 0x10
 afa:	31 89       	ldd	r19, Z+17	; 0x11
 afc:	66 85       	ldd	r22, Z+14	; 0x0e
 afe:	77 85       	ldd	r23, Z+15	; 0x0f
 b00:	e9 01       	movw	r28, r18
 b02:	7b 83       	std	Y+3, r23	; 0x03
 b04:	6a 83       	std	Y+2, r22	; 0x02
 b06:	11 96       	adiw	r26, 0x01	; 1
 b08:	6d 91       	ld	r22, X+
 b0a:	7c 91       	ld	r23, X
 b0c:	12 97       	sbiw	r26, 0x02	; 2
 b0e:	9f 01       	movw	r18, r30
 b10:	24 5f       	subi	r18, 0xF4	; 244
 b12:	3f 4f       	sbci	r19, 0xFF	; 255
 b14:	62 17       	cp	r22, r18
 b16:	73 07       	cpc	r23, r19
 b18:	31 f4       	brne	.+12     	; 0xb26 <xTaskIncrementTick+0x142>
 b1a:	20 89       	ldd	r18, Z+16	; 0x10
 b1c:	31 89       	ldd	r19, Z+17	; 0x11
 b1e:	12 96       	adiw	r26, 0x02	; 2
 b20:	3c 93       	st	X, r19
 b22:	2e 93       	st	-X, r18
 b24:	11 97       	sbiw	r26, 0x01	; 1
 b26:	15 8a       	std	Z+21, r1	; 0x15
 b28:	14 8a       	std	Z+20, r1	; 0x14
 b2a:	9c 91       	ld	r25, X
 b2c:	91 50       	subi	r25, 0x01	; 1
 b2e:	9c 93       	st	X, r25
 b30:	26 89       	ldd	r18, Z+22	; 0x16
 b32:	90 91 01 08 	lds	r25, 0x0801	; 0x800801 <uxTopReadyPriority>
 b36:	92 17       	cp	r25, r18
 b38:	10 f4       	brcc	.+4      	; 0xb3e <xTaskIncrementTick+0x15a>
 b3a:	20 93 01 08 	sts	0x0801, r18	; 0x800801 <uxTopReadyPriority>
 b3e:	30 e0       	ldi	r19, 0x00	; 0
 b40:	d9 01       	movw	r26, r18
 b42:	aa 0f       	add	r26, r26
 b44:	bb 1f       	adc	r27, r27
 b46:	aa 0f       	add	r26, r26
 b48:	bb 1f       	adc	r27, r27
 b4a:	aa 0f       	add	r26, r26
 b4c:	bb 1f       	adc	r27, r27
 b4e:	2a 0f       	add	r18, r26
 b50:	3b 1f       	adc	r19, r27
 b52:	d9 01       	movw	r26, r18
 b54:	a3 5d       	subi	r26, 0xD3	; 211
 b56:	b7 4f       	sbci	r27, 0xF7	; 247
 b58:	11 96       	adiw	r26, 0x01	; 1
 b5a:	0d 90       	ld	r0, X+
 b5c:	bc 91       	ld	r27, X
 b5e:	a0 2d       	mov	r26, r0
 b60:	b5 83       	std	Z+5, r27	; 0x05
 b62:	a4 83       	std	Z+4, r26	; 0x04
 b64:	14 96       	adiw	r26, 0x04	; 4
 b66:	2d 91       	ld	r18, X+
 b68:	3c 91       	ld	r19, X
 b6a:	15 97       	sbiw	r26, 0x05	; 5
 b6c:	37 83       	std	Z+7, r19	; 0x07
 b6e:	26 83       	std	Z+6, r18	; 0x06
 b70:	14 96       	adiw	r26, 0x04	; 4
 b72:	2d 91       	ld	r18, X+
 b74:	3c 91       	ld	r19, X
 b76:	15 97       	sbiw	r26, 0x05	; 5
 b78:	e9 01       	movw	r28, r18
 b7a:	5b 83       	std	Y+3, r21	; 0x03
 b7c:	4a 83       	std	Y+2, r20	; 0x02
 b7e:	15 96       	adiw	r26, 0x05	; 5
 b80:	5c 93       	st	X, r21
 b82:	4e 93       	st	-X, r20
 b84:	14 97       	sbiw	r26, 0x04	; 4
 b86:	a6 89       	ldd	r26, Z+22	; 0x16
 b88:	b0 e0       	ldi	r27, 0x00	; 0
 b8a:	9d 01       	movw	r18, r26
 b8c:	22 0f       	add	r18, r18
 b8e:	33 1f       	adc	r19, r19
 b90:	22 0f       	add	r18, r18
 b92:	33 1f       	adc	r19, r19
 b94:	22 0f       	add	r18, r18
 b96:	33 1f       	adc	r19, r19
 b98:	a2 0f       	add	r26, r18
 b9a:	b3 1f       	adc	r27, r19
 b9c:	a3 5d       	subi	r26, 0xD3	; 211
 b9e:	b7 4f       	sbci	r27, 0xF7	; 247
 ba0:	b3 87       	std	Z+11, r27	; 0x0b
 ba2:	a2 87       	std	Z+10, r26	; 0x0a
 ba4:	9c 91       	ld	r25, X
 ba6:	9f 5f       	subi	r25, 0xFF	; 255
 ba8:	9c 93       	st	X, r25
 baa:	26 89       	ldd	r18, Z+22	; 0x16
 bac:	e0 91 51 08 	lds	r30, 0x0851	; 0x800851 <pxCurrentTCB>
 bb0:	f0 91 52 08 	lds	r31, 0x0852	; 0x800852 <pxCurrentTCB+0x1>
 bb4:	96 89       	ldd	r25, Z+22	; 0x16
 bb6:	92 17       	cp	r25, r18
 bb8:	08 f4       	brcc	.+2      	; 0xbbc <xTaskIncrementTick+0x1d8>
 bba:	49 cf       	rjmp	.-366    	; 0xa4e <xTaskIncrementTick+0x6a>
 bbc:	4b cf       	rjmp	.-362    	; 0xa54 <xTaskIncrementTick+0x70>
 bbe:	e0 91 51 08 	lds	r30, 0x0851	; 0x800851 <pxCurrentTCB>
 bc2:	f0 91 52 08 	lds	r31, 0x0852	; 0x800852 <pxCurrentTCB+0x1>
 bc6:	26 89       	ldd	r18, Z+22	; 0x16
 bc8:	30 e0       	ldi	r19, 0x00	; 0
 bca:	f9 01       	movw	r30, r18
 bcc:	ee 0f       	add	r30, r30
 bce:	ff 1f       	adc	r31, r31
 bd0:	ee 0f       	add	r30, r30
 bd2:	ff 1f       	adc	r31, r31
 bd4:	ee 0f       	add	r30, r30
 bd6:	ff 1f       	adc	r31, r31
 bd8:	2e 0f       	add	r18, r30
 bda:	3f 1f       	adc	r19, r31
 bdc:	f9 01       	movw	r30, r18
 bde:	e3 5d       	subi	r30, 0xD3	; 211
 be0:	f7 4f       	sbci	r31, 0xF7	; 247
 be2:	90 81       	ld	r25, Z
 be4:	92 30       	cpi	r25, 0x02	; 2
 be6:	08 f0       	brcs	.+2      	; 0xbea <xTaskIncrementTick+0x206>
 be8:	81 e0       	ldi	r24, 0x01	; 1
 bea:	90 91 fd 07 	lds	r25, 0x07FD	; 0x8007fd <xYieldPending>
 bee:	91 11       	cpse	r25, r1
 bf0:	0c c0       	rjmp	.+24     	; 0xc0a <xTaskIncrementTick+0x226>
 bf2:	0c c0       	rjmp	.+24     	; 0xc0c <xTaskIncrementTick+0x228>
 bf4:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <xPendedTicks>
 bf8:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <xPendedTicks+0x1>
 bfc:	01 96       	adiw	r24, 0x01	; 1
 bfe:	90 93 ff 07 	sts	0x07FF, r25	; 0x8007ff <xPendedTicks+0x1>
 c02:	80 93 fe 07 	sts	0x07FE, r24	; 0x8007fe <xPendedTicks>
 c06:	80 e0       	ldi	r24, 0x00	; 0
 c08:	01 c0       	rjmp	.+2      	; 0xc0c <xTaskIncrementTick+0x228>
 c0a:	81 e0       	ldi	r24, 0x01	; 1
 c0c:	df 91       	pop	r29
 c0e:	cf 91       	pop	r28
 c10:	1f 91       	pop	r17
 c12:	0f 91       	pop	r16
 c14:	08 95       	ret

00000c16 <xTaskResumeAll>:
 c16:	cf 93       	push	r28
 c18:	df 93       	push	r29
 c1a:	0f b6       	in	r0, 0x3f	; 63
 c1c:	f8 94       	cli
 c1e:	0f 92       	push	r0
 c20:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <uxSchedulerSuspended>
 c24:	81 50       	subi	r24, 0x01	; 1
 c26:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <uxSchedulerSuspended>
 c2a:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <uxSchedulerSuspended>
 c2e:	81 11       	cpse	r24, r1
 c30:	bc c0       	rjmp	.+376    	; 0xdaa <xTaskResumeAll+0x194>
 c32:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <uxCurrentNumberOfTasks>
 c36:	81 11       	cpse	r24, r1
 c38:	96 c0       	rjmp	.+300    	; 0xd66 <xTaskResumeAll+0x150>
 c3a:	ba c0       	rjmp	.+372    	; 0xdb0 <xTaskResumeAll+0x19a>
 c3c:	e0 91 13 08 	lds	r30, 0x0813	; 0x800813 <xPendingReadyList+0x5>
 c40:	f0 91 14 08 	lds	r31, 0x0814	; 0x800814 <xPendingReadyList+0x6>
 c44:	06 80       	ldd	r0, Z+6	; 0x06
 c46:	f7 81       	ldd	r31, Z+7	; 0x07
 c48:	e0 2d       	mov	r30, r0
 c4a:	a4 89       	ldd	r26, Z+20	; 0x14
 c4c:	b5 89       	ldd	r27, Z+21	; 0x15
 c4e:	c6 85       	ldd	r28, Z+14	; 0x0e
 c50:	d7 85       	ldd	r29, Z+15	; 0x0f
 c52:	80 89       	ldd	r24, Z+16	; 0x10
 c54:	91 89       	ldd	r25, Z+17	; 0x11
 c56:	9d 83       	std	Y+5, r25	; 0x05
 c58:	8c 83       	std	Y+4, r24	; 0x04
 c5a:	c0 89       	ldd	r28, Z+16	; 0x10
 c5c:	d1 89       	ldd	r29, Z+17	; 0x11
 c5e:	86 85       	ldd	r24, Z+14	; 0x0e
 c60:	97 85       	ldd	r25, Z+15	; 0x0f
 c62:	9b 83       	std	Y+3, r25	; 0x03
 c64:	8a 83       	std	Y+2, r24	; 0x02
 c66:	11 96       	adiw	r26, 0x01	; 1
 c68:	2d 91       	ld	r18, X+
 c6a:	3c 91       	ld	r19, X
 c6c:	12 97       	sbiw	r26, 0x02	; 2
 c6e:	cf 01       	movw	r24, r30
 c70:	0c 96       	adiw	r24, 0x0c	; 12
 c72:	28 17       	cp	r18, r24
 c74:	39 07       	cpc	r19, r25
 c76:	31 f4       	brne	.+12     	; 0xc84 <xTaskResumeAll+0x6e>
 c78:	80 89       	ldd	r24, Z+16	; 0x10
 c7a:	91 89       	ldd	r25, Z+17	; 0x11
 c7c:	12 96       	adiw	r26, 0x02	; 2
 c7e:	9c 93       	st	X, r25
 c80:	8e 93       	st	-X, r24
 c82:	11 97       	sbiw	r26, 0x01	; 1
 c84:	15 8a       	std	Z+21, r1	; 0x15
 c86:	14 8a       	std	Z+20, r1	; 0x14
 c88:	8c 91       	ld	r24, X
 c8a:	81 50       	subi	r24, 0x01	; 1
 c8c:	8c 93       	st	X, r24
 c8e:	a2 85       	ldd	r26, Z+10	; 0x0a
 c90:	b3 85       	ldd	r27, Z+11	; 0x0b
 c92:	c4 81       	ldd	r28, Z+4	; 0x04
 c94:	d5 81       	ldd	r29, Z+5	; 0x05
 c96:	86 81       	ldd	r24, Z+6	; 0x06
 c98:	97 81       	ldd	r25, Z+7	; 0x07
 c9a:	9d 83       	std	Y+5, r25	; 0x05
 c9c:	8c 83       	std	Y+4, r24	; 0x04
 c9e:	c6 81       	ldd	r28, Z+6	; 0x06
 ca0:	d7 81       	ldd	r29, Z+7	; 0x07
 ca2:	84 81       	ldd	r24, Z+4	; 0x04
 ca4:	95 81       	ldd	r25, Z+5	; 0x05
 ca6:	9b 83       	std	Y+3, r25	; 0x03
 ca8:	8a 83       	std	Y+2, r24	; 0x02
 caa:	11 96       	adiw	r26, 0x01	; 1
 cac:	8d 91       	ld	r24, X+
 cae:	9c 91       	ld	r25, X
 cb0:	12 97       	sbiw	r26, 0x02	; 2
 cb2:	9f 01       	movw	r18, r30
 cb4:	2e 5f       	subi	r18, 0xFE	; 254
 cb6:	3f 4f       	sbci	r19, 0xFF	; 255
 cb8:	82 17       	cp	r24, r18
 cba:	93 07       	cpc	r25, r19
 cbc:	31 f4       	brne	.+12     	; 0xcca <xTaskResumeAll+0xb4>
 cbe:	86 81       	ldd	r24, Z+6	; 0x06
 cc0:	97 81       	ldd	r25, Z+7	; 0x07
 cc2:	12 96       	adiw	r26, 0x02	; 2
 cc4:	9c 93       	st	X, r25
 cc6:	8e 93       	st	-X, r24
 cc8:	11 97       	sbiw	r26, 0x01	; 1
 cca:	13 86       	std	Z+11, r1	; 0x0b
 ccc:	12 86       	std	Z+10, r1	; 0x0a
 cce:	8c 91       	ld	r24, X
 cd0:	81 50       	subi	r24, 0x01	; 1
 cd2:	8c 93       	st	X, r24
 cd4:	86 89       	ldd	r24, Z+22	; 0x16
 cd6:	90 91 01 08 	lds	r25, 0x0801	; 0x800801 <uxTopReadyPriority>
 cda:	98 17       	cp	r25, r24
 cdc:	10 f4       	brcc	.+4      	; 0xce2 <xTaskResumeAll+0xcc>
 cde:	80 93 01 08 	sts	0x0801, r24	; 0x800801 <uxTopReadyPriority>
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	dc 01       	movw	r26, r24
 ce6:	aa 0f       	add	r26, r26
 ce8:	bb 1f       	adc	r27, r27
 cea:	aa 0f       	add	r26, r26
 cec:	bb 1f       	adc	r27, r27
 cee:	aa 0f       	add	r26, r26
 cf0:	bb 1f       	adc	r27, r27
 cf2:	8a 0f       	add	r24, r26
 cf4:	9b 1f       	adc	r25, r27
 cf6:	dc 01       	movw	r26, r24
 cf8:	a3 5d       	subi	r26, 0xD3	; 211
 cfa:	b7 4f       	sbci	r27, 0xF7	; 247
 cfc:	11 96       	adiw	r26, 0x01	; 1
 cfe:	0d 90       	ld	r0, X+
 d00:	bc 91       	ld	r27, X
 d02:	a0 2d       	mov	r26, r0
 d04:	b5 83       	std	Z+5, r27	; 0x05
 d06:	a4 83       	std	Z+4, r26	; 0x04
 d08:	14 96       	adiw	r26, 0x04	; 4
 d0a:	8d 91       	ld	r24, X+
 d0c:	9c 91       	ld	r25, X
 d0e:	15 97       	sbiw	r26, 0x05	; 5
 d10:	97 83       	std	Z+7, r25	; 0x07
 d12:	86 83       	std	Z+6, r24	; 0x06
 d14:	14 96       	adiw	r26, 0x04	; 4
 d16:	cd 91       	ld	r28, X+
 d18:	dc 91       	ld	r29, X
 d1a:	15 97       	sbiw	r26, 0x05	; 5
 d1c:	3b 83       	std	Y+3, r19	; 0x03
 d1e:	2a 83       	std	Y+2, r18	; 0x02
 d20:	15 96       	adiw	r26, 0x05	; 5
 d22:	3c 93       	st	X, r19
 d24:	2e 93       	st	-X, r18
 d26:	14 97       	sbiw	r26, 0x04	; 4
 d28:	a6 89       	ldd	r26, Z+22	; 0x16
 d2a:	b0 e0       	ldi	r27, 0x00	; 0
 d2c:	cd 01       	movw	r24, r26
 d2e:	88 0f       	add	r24, r24
 d30:	99 1f       	adc	r25, r25
 d32:	88 0f       	add	r24, r24
 d34:	99 1f       	adc	r25, r25
 d36:	88 0f       	add	r24, r24
 d38:	99 1f       	adc	r25, r25
 d3a:	a8 0f       	add	r26, r24
 d3c:	b9 1f       	adc	r27, r25
 d3e:	a3 5d       	subi	r26, 0xD3	; 211
 d40:	b7 4f       	sbci	r27, 0xF7	; 247
 d42:	b3 87       	std	Z+11, r27	; 0x0b
 d44:	a2 87       	std	Z+10, r26	; 0x0a
 d46:	8c 91       	ld	r24, X
 d48:	8f 5f       	subi	r24, 0xFF	; 255
 d4a:	8c 93       	st	X, r24
 d4c:	96 89       	ldd	r25, Z+22	; 0x16
 d4e:	a0 91 51 08 	lds	r26, 0x0851	; 0x800851 <pxCurrentTCB>
 d52:	b0 91 52 08 	lds	r27, 0x0852	; 0x800852 <pxCurrentTCB+0x1>
 d56:	56 96       	adiw	r26, 0x16	; 22
 d58:	8c 91       	ld	r24, X
 d5a:	98 17       	cp	r25, r24
 d5c:	30 f0       	brcs	.+12     	; 0xd6a <xTaskResumeAll+0x154>
 d5e:	81 e0       	ldi	r24, 0x01	; 1
 d60:	80 93 fd 07 	sts	0x07FD, r24	; 0x8007fd <xYieldPending>
 d64:	02 c0       	rjmp	.+4      	; 0xd6a <xTaskResumeAll+0x154>
 d66:	e0 e0       	ldi	r30, 0x00	; 0
 d68:	f0 e0       	ldi	r31, 0x00	; 0
 d6a:	80 91 0e 08 	lds	r24, 0x080E	; 0x80080e <xPendingReadyList>
 d6e:	81 11       	cpse	r24, r1
 d70:	65 cf       	rjmp	.-310    	; 0xc3c <xTaskResumeAll+0x26>
 d72:	ef 2b       	or	r30, r31
 d74:	09 f0       	breq	.+2      	; 0xd78 <xTaskResumeAll+0x162>
 d76:	02 dc       	rcall	.-2044   	; 0x57c <prvResetNextTaskUnblockTime>
 d78:	c0 91 fe 07 	lds	r28, 0x07FE	; 0x8007fe <xPendedTicks>
 d7c:	d0 91 ff 07 	lds	r29, 0x07FF	; 0x8007ff <xPendedTicks+0x1>
 d80:	20 97       	sbiw	r28, 0x00	; 0
 d82:	61 f0       	breq	.+24     	; 0xd9c <xTaskResumeAll+0x186>
 d84:	2f de       	rcall	.-930    	; 0x9e4 <xTaskIncrementTick>
 d86:	88 23       	and	r24, r24
 d88:	19 f0       	breq	.+6      	; 0xd90 <xTaskResumeAll+0x17a>
 d8a:	81 e0       	ldi	r24, 0x01	; 1
 d8c:	80 93 fd 07 	sts	0x07FD, r24	; 0x8007fd <xYieldPending>
 d90:	21 97       	sbiw	r28, 0x01	; 1
 d92:	c1 f7       	brne	.-16     	; 0xd84 <xTaskResumeAll+0x16e>
 d94:	10 92 ff 07 	sts	0x07FF, r1	; 0x8007ff <xPendedTicks+0x1>
 d98:	10 92 fe 07 	sts	0x07FE, r1	; 0x8007fe <xPendedTicks>
 d9c:	80 91 fd 07 	lds	r24, 0x07FD	; 0x8007fd <xYieldPending>
 da0:	88 23       	and	r24, r24
 da2:	29 f0       	breq	.+10     	; 0xdae <xTaskResumeAll+0x198>
 da4:	27 db       	rcall	.-2482   	; 0x3f4 <vPortYield>
 da6:	81 e0       	ldi	r24, 0x01	; 1
 da8:	03 c0       	rjmp	.+6      	; 0xdb0 <xTaskResumeAll+0x19a>
 daa:	80 e0       	ldi	r24, 0x00	; 0
 dac:	01 c0       	rjmp	.+2      	; 0xdb0 <xTaskResumeAll+0x19a>
 dae:	80 e0       	ldi	r24, 0x00	; 0
 db0:	0f 90       	pop	r0
 db2:	0f be       	out	0x3f, r0	; 63
 db4:	df 91       	pop	r29
 db6:	cf 91       	pop	r28
 db8:	08 95       	ret

00000dba <vTaskDelay>:
 dba:	cf 93       	push	r28
 dbc:	df 93       	push	r29
 dbe:	ec 01       	movw	r28, r24
 dc0:	89 2b       	or	r24, r25
 dc2:	31 f0       	breq	.+12     	; 0xdd0 <vTaskDelay+0x16>
 dc4:	09 de       	rcall	.-1006   	; 0x9d8 <vTaskSuspendAll>
 dc6:	60 e0       	ldi	r22, 0x00	; 0
 dc8:	ce 01       	movw	r24, r28
 dca:	03 dd       	rcall	.-1530   	; 0x7d2 <prvAddCurrentTaskToDelayedList>
 dcc:	24 df       	rcall	.-440    	; 0xc16 <xTaskResumeAll>
 dce:	01 c0       	rjmp	.+2      	; 0xdd2 <vTaskDelay+0x18>
 dd0:	80 e0       	ldi	r24, 0x00	; 0
 dd2:	81 11       	cpse	r24, r1
 dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <vTaskDelay+0x1e>
 dd6:	0e db       	rcall	.-2532   	; 0x3f4 <vPortYield>
 dd8:	df 91       	pop	r29
 dda:	cf 91       	pop	r28
 ddc:	08 95       	ret

00000dde <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 dde:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <uxSchedulerSuspended>
 de2:	88 23       	and	r24, r24
 de4:	21 f0       	breq	.+8      	; 0xdee <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 de6:	81 e0       	ldi	r24, 0x01	; 1
 de8:	80 93 fd 07 	sts	0x07FD, r24	; 0x8007fd <xYieldPending>
 dec:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
 dee:	10 92 fd 07 	sts	0x07FD, r1	; 0x8007fd <xYieldPending>
        }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 df2:	20 91 01 08 	lds	r18, 0x0801	; 0x800801 <uxTopReadyPriority>
 df6:	01 c0       	rjmp	.+2      	; 0xdfa <vTaskSwitchContext+0x1c>
 df8:	21 50       	subi	r18, 0x01	; 1
 dfa:	82 2f       	mov	r24, r18
 dfc:	90 e0       	ldi	r25, 0x00	; 0
 dfe:	fc 01       	movw	r30, r24
 e00:	ee 0f       	add	r30, r30
 e02:	ff 1f       	adc	r31, r31
 e04:	ee 0f       	add	r30, r30
 e06:	ff 1f       	adc	r31, r31
 e08:	ee 0f       	add	r30, r30
 e0a:	ff 1f       	adc	r31, r31
 e0c:	e8 0f       	add	r30, r24
 e0e:	f9 1f       	adc	r31, r25
 e10:	e3 5d       	subi	r30, 0xD3	; 211
 e12:	f7 4f       	sbci	r31, 0xF7	; 247
 e14:	30 81       	ld	r19, Z
 e16:	33 23       	and	r19, r19
 e18:	79 f3       	breq	.-34     	; 0xdf8 <vTaskSwitchContext+0x1a>
 e1a:	ac 01       	movw	r20, r24
 e1c:	44 0f       	add	r20, r20
 e1e:	55 1f       	adc	r21, r21
 e20:	44 0f       	add	r20, r20
 e22:	55 1f       	adc	r21, r21
 e24:	44 0f       	add	r20, r20
 e26:	55 1f       	adc	r21, r21
 e28:	48 0f       	add	r20, r24
 e2a:	59 1f       	adc	r21, r25
 e2c:	df 01       	movw	r26, r30
 e2e:	01 80       	ldd	r0, Z+1	; 0x01
 e30:	f2 81       	ldd	r31, Z+2	; 0x02
 e32:	e0 2d       	mov	r30, r0
 e34:	02 80       	ldd	r0, Z+2	; 0x02
 e36:	f3 81       	ldd	r31, Z+3	; 0x03
 e38:	e0 2d       	mov	r30, r0
 e3a:	12 96       	adiw	r26, 0x02	; 2
 e3c:	fc 93       	st	X, r31
 e3e:	ee 93       	st	-X, r30
 e40:	11 97       	sbiw	r26, 0x01	; 1
 e42:	40 5d       	subi	r20, 0xD0	; 208
 e44:	57 4f       	sbci	r21, 0xF7	; 247
 e46:	e4 17       	cp	r30, r20
 e48:	f5 07       	cpc	r31, r21
 e4a:	29 f4       	brne	.+10     	; 0xe56 <vTaskSwitchContext+0x78>
 e4c:	42 81       	ldd	r20, Z+2	; 0x02
 e4e:	53 81       	ldd	r21, Z+3	; 0x03
 e50:	fd 01       	movw	r30, r26
 e52:	52 83       	std	Z+2, r21	; 0x02
 e54:	41 83       	std	Z+1, r20	; 0x01
 e56:	fc 01       	movw	r30, r24
 e58:	ee 0f       	add	r30, r30
 e5a:	ff 1f       	adc	r31, r31
 e5c:	ee 0f       	add	r30, r30
 e5e:	ff 1f       	adc	r31, r31
 e60:	ee 0f       	add	r30, r30
 e62:	ff 1f       	adc	r31, r31
 e64:	8e 0f       	add	r24, r30
 e66:	9f 1f       	adc	r25, r31
 e68:	fc 01       	movw	r30, r24
 e6a:	e3 5d       	subi	r30, 0xD3	; 211
 e6c:	f7 4f       	sbci	r31, 0xF7	; 247
 e6e:	01 80       	ldd	r0, Z+1	; 0x01
 e70:	f2 81       	ldd	r31, Z+2	; 0x02
 e72:	e0 2d       	mov	r30, r0
 e74:	86 81       	ldd	r24, Z+6	; 0x06
 e76:	97 81       	ldd	r25, Z+7	; 0x07
 e78:	90 93 52 08 	sts	0x0852, r25	; 0x800852 <pxCurrentTCB+0x1>
 e7c:	80 93 51 08 	sts	0x0851, r24	; 0x800851 <pxCurrentTCB>
 e80:	20 93 01 08 	sts	0x0801, r18	; 0x800801 <uxTopReadyPriority>
 e84:	08 95       	ret

00000e86 <vLEDFlashTask1>:
void vLEDFlashTask1( void *pvParameters )
{
	const TickType_t xDelay = 1000 / portTICK_PERIOD_MS;
	while(1)
	{
		vTaskDelay( xDelay );
 e86:	88 ee       	ldi	r24, 0xE8	; 232
 e88:	93 e0       	ldi	r25, 0x03	; 3
 e8a:	97 df       	rcall	.-210    	; 0xdba <vTaskDelay>
		toggleLED(0);	
 e8c:	80 e0       	ldi	r24, 0x00	; 0
 e8e:	4e d9       	rcall	.-3428   	; 0x12c <toggleLED>
 e90:	fa cf       	rjmp	.-12     	; 0xe86 <vLEDFlashTask1>

00000e92 <vLEDFlashTask2>:
void vLEDFlashTask2( void *pvParameters )
{
	const TickType_t xDelay = 1000 / portTICK_PERIOD_MS;
	while(1)
	{
		toggleLED(1);
 e92:	81 e0       	ldi	r24, 0x01	; 1
 e94:	4b d9       	rcall	.-3434   	; 0x12c <toggleLED>
		vTaskDelay( xDelay );
 e96:	88 ee       	ldi	r24, 0xE8	; 232
 e98:	93 e0       	ldi	r25, 0x03	; 3
 e9a:	8f df       	rcall	.-226    	; 0xdba <vTaskDelay>
 e9c:	fa cf       	rjmp	.-12     	; 0xe92 <vLEDFlashTask2>

00000e9e <vLEDFlashTask3>:
void vLEDFlashTask3( void *pvParameters )
{
	const TickType_t xDelay = 500 / portTICK_PERIOD_MS;
	while(1)
	{
		toggleLED(2);
 e9e:	82 e0       	ldi	r24, 0x02	; 2
 ea0:	45 d9       	rcall	.-3446   	; 0x12c <toggleLED>
		vTaskDelay( xDelay );
 ea2:	84 ef       	ldi	r24, 0xF4	; 244
 ea4:	91 e0       	ldi	r25, 0x01	; 1
 ea6:	89 df       	rcall	.-238    	; 0xdba <vTaskDelay>
 ea8:	fa cf       	rjmp	.-12     	; 0xe9e <vLEDFlashTask3>

00000eaa <vApplicationIdleHook>:
	}
}

void vApplicationIdleHook( void )
{
 eaa:	08 95       	ret

00000eac <main>:
	/* Doesn't do anything yet. */
}

int main(void)
{
	initLEDport();
 eac:	3b d9       	rcall	.-3466   	; 0x124 <initLEDport>
	xTaskCreate( vLEDFlashTask1, "LED1", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 eae:	e1 2c       	mov	r14, r1
 eb0:	f1 2c       	mov	r15, r1
 eb2:	00 e0       	ldi	r16, 0x00	; 0
 eb4:	20 e0       	ldi	r18, 0x00	; 0
 eb6:	30 e0       	ldi	r19, 0x00	; 0
 eb8:	45 e5       	ldi	r20, 0x55	; 85
 eba:	50 e0       	ldi	r21, 0x00	; 0
 ebc:	66 e0       	ldi	r22, 0x06	; 6
 ebe:	72 e0       	ldi	r23, 0x02	; 2
 ec0:	83 e4       	ldi	r24, 0x43	; 67
 ec2:	97 e0       	ldi	r25, 0x07	; 7
 ec4:	0b dd       	rcall	.-1514   	; 0x8dc <xTaskCreate>
	xTaskCreate( vLEDFlashTask2, "LED2", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 ec6:	20 e0       	ldi	r18, 0x00	; 0
 ec8:	30 e0       	ldi	r19, 0x00	; 0
 eca:	45 e5       	ldi	r20, 0x55	; 85
 ecc:	50 e0       	ldi	r21, 0x00	; 0
 ece:	6b e0       	ldi	r22, 0x0B	; 11
 ed0:	72 e0       	ldi	r23, 0x02	; 2
 ed2:	89 e4       	ldi	r24, 0x49	; 73
 ed4:	97 e0       	ldi	r25, 0x07	; 7
 ed6:	02 dd       	rcall	.-1532   	; 0x8dc <xTaskCreate>
	xTaskCreate( vLEDFlashTask3, "LED3", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 ed8:	20 e0       	ldi	r18, 0x00	; 0
 eda:	30 e0       	ldi	r19, 0x00	; 0
 edc:	45 e5       	ldi	r20, 0x55	; 85
 ede:	50 e0       	ldi	r21, 0x00	; 0
 ee0:	60 e1       	ldi	r22, 0x10	; 16
 ee2:	72 e0       	ldi	r23, 0x02	; 2
 ee4:	8f e4       	ldi	r24, 0x4F	; 79
 ee6:	97 e0       	ldi	r25, 0x07	; 7
	vTaskStartScheduler();
 ee8:	f9 dc       	rcall	.-1550   	; 0x8dc <xTaskCreate>
 eea:	4c dd       	rcall	.-1384   	; 0x984 <vTaskStartScheduler>
 eec:	ff cf       	rjmp	.-2      	; 0xeec <main+0x40>

00000eee <_exit>:
 eee:	f8 94       	cli

00000ef0 <__stop_program>:
 ef0:	ff cf       	rjmp	.-2      	; 0xef0 <__stop_program>
