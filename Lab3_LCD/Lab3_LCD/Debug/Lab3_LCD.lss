
Lab3_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800200  00000526  0000059a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000526  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b0e  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001089  00000000  00000000  00002252  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a55  00000000  00000000  000032db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000248  00000000  00000000  00003d30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000773  00000000  00000000  00003f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b49  00000000  00000000  000046eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00005234  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e2       	ldi	r30, 0x26	; 38
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 32       	cpi	r26, 0x2A	; 42
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	a9 d1       	rcall	.+850    	; 0x462 <main>
 110:	08 c2       	rjmp	.+1040   	; 0x522 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <init_adc>:
#define ADCEN 7
//#define ADSC 6

void init_adc(){
	// Choose adc1
	ADMUX = 0b01000001;
 114:	81 e4       	ldi	r24, 0x41	; 65
 116:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	// Enable adc by setting bit 7 in ADCSRA reg
	ADCSRA |= (1 << ADCEN);
 11a:	ea e7       	ldi	r30, 0x7A	; 122
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 68       	ori	r24, 0x80	; 128
 122:	80 83       	st	Z, r24
	ADCSRB = 0;
 124:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
 128:	08 95       	ret

0000012a <adc_read_single>:
}

// First conversion takes 25 clock cycles, subsequent 13
int adc_read_single(){
	ADCSRA |= (1 << ADSC);
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 64       	ori	r24, 0x40	; 64
 132:	80 83       	st	Z, r24
	while ((ADCSRA >> ADSC) & 1){};
 134:	80 81       	ld	r24, Z
 136:	86 fd       	sbrc	r24, 6
 138:	fd cf       	rjmp	.-6      	; 0x134 <adc_read_single+0xa>
	int val = ADCW;
 13a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 13e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	//int val = ADCL;
	//val |= ADCH;
	return val;
}
 142:	08 95       	ret

00000144 <pulse_E>:
  _delay_ms(1);
}

// Moves the cursor to the left
void LCDCursorLeft()
{
 144:	e2 e0       	ldi	r30, 0x02	; 2
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	80 81       	ld	r24, Z
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	80 83       	st	Z, r24
 14e:	84 e6       	ldi	r24, 0x64	; 100
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	00 00       	nop
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	e9 f7       	brne	.-6      	; 0x152 <pulse_E+0xe>
 158:	e2 e0       	ldi	r30, 0x02	; 2
 15a:	f1 e0       	ldi	r31, 0x01	; 1
 15c:	80 81       	ld	r24, Z
 15e:	8f 7b       	andi	r24, 0xBF	; 191
 160:	80 83       	st	Z, r24
 162:	84 e6       	ldi	r24, 0x64	; 100
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	00 00       	nop
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	e9 f7       	brne	.-6      	; 0x166 <pulse_E+0x22>
 16c:	08 95       	ret

0000016e <set4DataPins>:
 16e:	e2 e0       	ldi	r30, 0x02	; 2
 170:	f1 e0       	ldi	r31, 0x01	; 1
 172:	20 81       	ld	r18, Z
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	ac 01       	movw	r20, r24
 178:	44 0f       	add	r20, r20
 17a:	55 1f       	adc	r21, r21
 17c:	48 71       	andi	r20, 0x18	; 24
 17e:	27 7e       	andi	r18, 0xE7	; 231
 180:	24 2b       	or	r18, r20
 182:	20 83       	st	Z, r18
 184:	2e b1       	in	r18, 0x0e	; 14
 186:	ac 01       	movw	r20, r24
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	44 0f       	add	r20, r20
 18e:	55 1f       	adc	r21, r21
 190:	48 70       	andi	r20, 0x08	; 8
 192:	27 7f       	andi	r18, 0xF7	; 247
 194:	24 2b       	or	r18, r20
 196:	2e b9       	out	0x0e, r18	; 14
 198:	24 b3       	in	r18, 0x14	; 20
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	82 95       	swap	r24
 1a0:	92 95       	swap	r25
 1a2:	90 7f       	andi	r25, 0xF0	; 240
 1a4:	98 27       	eor	r25, r24
 1a6:	80 7f       	andi	r24, 0xF0	; 240
 1a8:	98 27       	eor	r25, r24
 1aa:	80 72       	andi	r24, 0x20	; 32
 1ac:	92 2f       	mov	r25, r18
 1ae:	9f 7d       	andi	r25, 0xDF	; 223
 1b0:	89 2b       	or	r24, r25
 1b2:	84 bb       	out	0x14, r24	; 20
 1b4:	08 95       	ret

000001b6 <sendData>:
 1b6:	cf 93       	push	r28
 1b8:	c8 2f       	mov	r28, r24
 1ba:	e2 e0       	ldi	r30, 0x02	; 2
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
 1be:	80 81       	ld	r24, Z
 1c0:	80 62       	ori	r24, 0x20	; 32
 1c2:	80 83       	st	Z, r24
 1c4:	00 00       	nop
 1c6:	8c 2f       	mov	r24, r28
 1c8:	82 95       	swap	r24
 1ca:	8f 70       	andi	r24, 0x0F	; 15
 1cc:	d0 df       	rcall	.-96     	; 0x16e <set4DataPins>
 1ce:	00 00       	nop
 1d0:	b9 df       	rcall	.-142    	; 0x144 <pulse_E>
 1d2:	8c 2f       	mov	r24, r28
 1d4:	cc df       	rcall	.-104    	; 0x16e <set4DataPins>
 1d6:	00 00       	nop
 1d8:	b5 df       	rcall	.-150    	; 0x144 <pulse_E>
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <sendInstruction>:
 1de:	cf 93       	push	r28
 1e0:	c8 2f       	mov	r28, r24
 1e2:	e2 e0       	ldi	r30, 0x02	; 2
 1e4:	f1 e0       	ldi	r31, 0x01	; 1
 1e6:	80 81       	ld	r24, Z
 1e8:	8f 7d       	andi	r24, 0xDF	; 223
 1ea:	80 83       	st	Z, r24
 1ec:	00 00       	nop
 1ee:	00 00       	nop
 1f0:	8c 2f       	mov	r24, r28
 1f2:	82 95       	swap	r24
 1f4:	8f 70       	andi	r24, 0x0F	; 15
 1f6:	bb df       	rcall	.-138    	; 0x16e <set4DataPins>
 1f8:	00 00       	nop
 1fa:	00 00       	nop
 1fc:	a3 df       	rcall	.-186    	; 0x144 <pulse_E>
 1fe:	00 00       	nop
 200:	00 00       	nop
 202:	8c 2f       	mov	r24, r28
 204:	b4 df       	rcall	.-152    	; 0x16e <set4DataPins>
 206:	00 00       	nop
 208:	00 00       	nop
 20a:	9c df       	rcall	.-200    	; 0x144 <pulse_E>
 20c:	8f e9       	ldi	r24, 0x9F	; 159
 20e:	9f e0       	ldi	r25, 0x0F	; 15
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <sendInstruction+0x32>
 214:	00 c0       	rjmp	.+0      	; 0x216 <sendInstruction+0x38>
 216:	00 00       	nop
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <LCDInit>:
 21c:	e1 e0       	ldi	r30, 0x01	; 1
 21e:	f1 e0       	ldi	r31, 0x01	; 1
 220:	80 81       	ld	r24, Z
 222:	88 67       	ori	r24, 0x78	; 120
 224:	80 83       	st	Z, r24
 226:	6b 9a       	sbi	0x0d, 3	; 13
 228:	9d 9a       	sbi	0x13, 5	; 19
 22a:	2f ef       	ldi	r18, 0xFF	; 255
 22c:	80 e7       	ldi	r24, 0x70	; 112
 22e:	92 e0       	ldi	r25, 0x02	; 2
 230:	21 50       	subi	r18, 0x01	; 1
 232:	80 40       	sbci	r24, 0x00	; 0
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <LCDInit+0x14>
 238:	00 c0       	rjmp	.+0      	; 0x23a <LCDInit+0x1e>
 23a:	00 00       	nop
 23c:	a5 9a       	sbi	0x14, 5	; 20
 23e:	73 9a       	sbi	0x0e, 3	; 14
 240:	81 df       	rcall	.-254    	; 0x144 <pulse_E>
 242:	8f e3       	ldi	r24, 0x3F	; 63
 244:	9c e9       	ldi	r25, 0x9C	; 156
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <LCDInit+0x2a>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <LCDInit+0x30>
 24c:	00 00       	nop
 24e:	7a df       	rcall	.-268    	; 0x144 <pulse_E>
 250:	8f e3       	ldi	r24, 0x3F	; 63
 252:	9c e9       	ldi	r25, 0x9C	; 156
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <LCDInit+0x38>
 258:	00 c0       	rjmp	.+0      	; 0x25a <LCDInit+0x3e>
 25a:	00 00       	nop
 25c:	73 df       	rcall	.-282    	; 0x144 <pulse_E>
 25e:	8f e3       	ldi	r24, 0x3F	; 63
 260:	9c e9       	ldi	r25, 0x9C	; 156
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCDInit+0x46>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCDInit+0x4c>
 268:	00 00       	nop
 26a:	a5 98       	cbi	0x14, 5	; 20
 26c:	6b df       	rcall	.-298    	; 0x144 <pulse_E>
 26e:	88 e2       	ldi	r24, 0x28	; 40
 270:	b6 df       	rcall	.-148    	; 0x1de <sendInstruction>
 272:	88 e0       	ldi	r24, 0x08	; 8
 274:	b4 df       	rcall	.-152    	; 0x1de <sendInstruction>
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	b2 df       	rcall	.-156    	; 0x1de <sendInstruction>
 27a:	86 e0       	ldi	r24, 0x06	; 6
 27c:	b0 df       	rcall	.-160    	; 0x1de <sendInstruction>
 27e:	8c e0       	ldi	r24, 0x0C	; 12
 280:	ae cf       	rjmp	.-164    	; 0x1de <sendInstruction>
 282:	08 95       	ret

00000284 <LCDClear>:
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	ab df       	rcall	.-170    	; 0x1de <sendInstruction>
 288:	8f e9       	ldi	r24, 0x9F	; 159
 28a:	9f e0       	ldi	r25, 0x0F	; 15
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <LCDClear+0x8>
 290:	00 c0       	rjmp	.+0      	; 0x292 <LCDClear+0xe>
 292:	00 00       	nop
 294:	08 95       	ret

00000296 <LCDGotoXY>:
 296:	62 30       	cpi	r22, 0x02	; 2
 298:	40 f4       	brcc	.+16     	; 0x2aa <LCDGotoXY+0x14>
 29a:	80 31       	cpi	r24, 0x10	; 16
 29c:	30 f4       	brcc	.+12     	; 0x2aa <LCDGotoXY+0x14>
 29e:	90 e4       	ldi	r25, 0x40	; 64
 2a0:	69 9f       	mul	r22, r25
 2a2:	80 0d       	add	r24, r0
 2a4:	11 24       	eor	r1, r1
 2a6:	80 68       	ori	r24, 0x80	; 128
 2a8:	9a cf       	rjmp	.-204    	; 0x1de <sendInstruction>
 2aa:	08 95       	ret

000002ac <LCDDispChar>:
 2ac:	84 cf       	rjmp	.-248    	; 0x1b6 <sendData>
 2ae:	08 95       	ret

000002b0 <LCDDispString>:
 2b0:	0f 93       	push	r16
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	ec 01       	movw	r28, r24
 2ba:	cb 01       	movw	r24, r22
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	80 97       	sbiw	r24, 0x20	; 32
 2c0:	40 f4       	brcc	.+16     	; 0x2d2 <LCDDispString+0x22>
 2c2:	8e 01       	movw	r16, r28
 2c4:	06 0f       	add	r16, r22
 2c6:	17 1f       	adc	r17, r23
 2c8:	89 91       	ld	r24, Y+
 2ca:	75 df       	rcall	.-278    	; 0x1b6 <sendData>
 2cc:	c0 17       	cp	r28, r16
 2ce:	d1 07       	cpc	r29, r17
 2d0:	d9 f7       	brne	.-10     	; 0x2c8 <LCDDispString+0x18>
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	08 95       	ret

000002dc <LCDDispInteger>:
 2dc:	ef 92       	push	r14
 2de:	ff 92       	push	r15
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
 2ec:	60 97       	sbiw	r28, 0x10	; 16
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	f8 94       	cli
 2f2:	de bf       	out	0x3e, r29	; 62
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	cd bf       	out	0x3d, r28	; 61
 2f8:	8c 01       	movw	r16, r24
 2fa:	01 15       	cp	r16, r1
 2fc:	80 e8       	ldi	r24, 0x80	; 128
 2fe:	18 07       	cpc	r17, r24
 300:	09 f4       	brne	.+2      	; 0x304 <LCDDispInteger+0x28>
 302:	60 c0       	rjmp	.+192    	; 0x3c4 <LCDDispInteger+0xe8>
 304:	c8 01       	movw	r24, r16
 306:	11 23       	and	r17, r17
 308:	24 f4       	brge	.+8      	; 0x312 <LCDDispInteger+0x36>
 30a:	88 27       	eor	r24, r24
 30c:	99 27       	eor	r25, r25
 30e:	80 1b       	sub	r24, r16
 310:	91 0b       	sbc	r25, r17
 312:	fe 01       	movw	r30, r28
 314:	31 96       	adiw	r30, 0x01	; 1
 316:	9e 01       	movw	r18, r28
 318:	27 5f       	subi	r18, 0xF7	; 247
 31a:	3f 4f       	sbci	r19, 0xFF	; 255
 31c:	df 01       	movw	r26, r30
 31e:	1d 92       	st	X+, r1
 320:	a2 17       	cp	r26, r18
 322:	b3 07       	cpc	r27, r19
 324:	e1 f7       	brne	.-8      	; 0x31e <LCDDispInteger+0x42>
 326:	00 97       	sbiw	r24, 0x00	; 0
 328:	79 f1       	breq	.+94     	; 0x388 <LCDDispInteger+0xac>
 32a:	8a 30       	cpi	r24, 0x0A	; 10
 32c:	91 05       	cpc	r25, r1
 32e:	0c f4       	brge	.+2      	; 0x332 <LCDDispInteger+0x56>
 330:	42 c0       	rjmp	.+132    	; 0x3b6 <LCDDispInteger+0xda>
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	0f 2e       	mov	r0, r31
 338:	fa e0       	ldi	r31, 0x0A	; 10
 33a:	ef 2e       	mov	r14, r31
 33c:	f1 2c       	mov	r15, r1
 33e:	f0 2d       	mov	r31, r0
 340:	16 c0       	rjmp	.+44     	; 0x36e <LCDDispInteger+0x92>
 342:	8a 30       	cpi	r24, 0x0A	; 10
 344:	91 05       	cpc	r25, r1
 346:	9c f4       	brge	.+38     	; 0x36e <LCDDispInteger+0x92>
 348:	de 01       	movw	r26, r28
 34a:	a2 0f       	add	r26, r18
 34c:	b3 1f       	adc	r27, r19
 34e:	80 5d       	subi	r24, 0xD0	; 208
 350:	11 96       	adiw	r26, 0x01	; 1
 352:	8c 93       	st	X, r24
 354:	11 23       	and	r17, r17
 356:	ac f4       	brge	.+42     	; 0x382 <LCDDispInteger+0xa6>
 358:	02 c0       	rjmp	.+4      	; 0x35e <LCDDispInteger+0x82>
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	2f 5f       	subi	r18, 0xFF	; 255
 360:	3f 4f       	sbci	r19, 0xFF	; 255
 362:	fe 01       	movw	r30, r28
 364:	e2 0f       	add	r30, r18
 366:	f3 1f       	adc	r31, r19
 368:	8d e2       	ldi	r24, 0x2D	; 45
 36a:	81 83       	std	Z+1, r24	; 0x01
 36c:	0a c0       	rjmp	.+20     	; 0x382 <LCDDispInteger+0xa6>
 36e:	b7 01       	movw	r22, r14
 370:	b1 d0       	rcall	.+354    	; 0x4d4 <__divmodhi4>
 372:	80 5d       	subi	r24, 0xD0	; 208
 374:	81 93       	st	Z+, r24
 376:	86 2f       	mov	r24, r22
 378:	97 2f       	mov	r25, r23
 37a:	2f 5f       	subi	r18, 0xFF	; 255
 37c:	3f 4f       	sbci	r19, 0xFF	; 255
 37e:	00 97       	sbiw	r24, 0x00	; 0
 380:	01 f7       	brne	.-64     	; 0x342 <LCDDispInteger+0x66>
 382:	33 23       	and	r19, r19
 384:	1c f4       	brge	.+6      	; 0x38c <LCDDispInteger+0xb0>
 386:	10 c0       	rjmp	.+32     	; 0x3a8 <LCDDispInteger+0xcc>
 388:	20 e0       	ldi	r18, 0x00	; 0
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	de 01       	movw	r26, r28
 38e:	a2 0f       	add	r26, r18
 390:	b3 1f       	adc	r27, r19
 392:	12 96       	adiw	r26, 0x02	; 2
 394:	fe 01       	movw	r30, r28
 396:	39 96       	adiw	r30, 0x09	; 9
 398:	c9 01       	movw	r24, r18
 39a:	4e 91       	ld	r20, -X
 39c:	41 11       	cpse	r20, r1
 39e:	40 83       	st	Z, r20
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	31 96       	adiw	r30, 0x01	; 1
 3a4:	99 23       	and	r25, r25
 3a6:	cc f7       	brge	.-14     	; 0x39a <LCDDispInteger+0xbe>
 3a8:	b9 01       	movw	r22, r18
 3aa:	6f 5f       	subi	r22, 0xFF	; 255
 3ac:	7f 4f       	sbci	r23, 0xFF	; 255
 3ae:	ce 01       	movw	r24, r28
 3b0:	09 96       	adiw	r24, 0x09	; 9
 3b2:	7e df       	rcall	.-260    	; 0x2b0 <LCDDispString>
 3b4:	07 c0       	rjmp	.+14     	; 0x3c4 <LCDDispInteger+0xe8>
 3b6:	80 5d       	subi	r24, 0xD0	; 208
 3b8:	89 83       	std	Y+1, r24	; 0x01
 3ba:	11 23       	and	r17, r17
 3bc:	74 f2       	brlt	.-100    	; 0x35a <LCDDispInteger+0x7e>
 3be:	20 e0       	ldi	r18, 0x00	; 0
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	e4 cf       	rjmp	.-56     	; 0x38c <LCDDispInteger+0xb0>
 3c4:	60 96       	adiw	r28, 0x10	; 16
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	f8 94       	cli
 3ca:	de bf       	out	0x3e, r29	; 62
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	cd bf       	out	0x3d, r28	; 61
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	1f 91       	pop	r17
 3d6:	0f 91       	pop	r16
 3d8:	ff 90       	pop	r15
 3da:	ef 90       	pop	r14
 3dc:	08 95       	ret

000003de <LCDOnOffControl>:
 3de:	88 23       	and	r24, r24
 3e0:	11 f0       	breq	.+4      	; 0x3e6 <LCDOnOffControl+0x8>
 3e2:	8c e0       	ldi	r24, 0x0C	; 12
 3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <LCDOnOffControl+0xa>
 3e6:	88 e0       	ldi	r24, 0x08	; 8
 3e8:	61 11       	cpse	r22, r1
 3ea:	82 60       	ori	r24, 0x02	; 2
 3ec:	f8 de       	rcall	.-528    	; 0x1de <sendInstruction>
 3ee:	8f e9       	ldi	r24, 0x9F	; 159
 3f0:	9f e0       	ldi	r25, 0x0F	; 15
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <LCDOnOffControl+0x14>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <LCDOnOffControl+0x1a>
 3f8:	00 00       	nop
 3fa:	08 95       	ret

000003fc <LCDCursorRight>:

// Moves the cursor to the right
void LCDCursorRight()
{
  // To be implemented
  sendInstruction(0b00010100);
 3fc:	84 e1       	ldi	r24, 0x14	; 20
 3fe:	ef ce       	rjmp	.-546    	; 0x1de <sendInstruction>
 400:	08 95       	ret

00000402 <measure_velocity>:
	LCDGotoXY(0, 1);
	LCDDispString(luv2, 12);
	_delay_ms(500);
}

void measure_velocity(int* val, int threshold){
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
	if(*val > threshold) return;
 40a:	fc 01       	movw	r30, r24
 40c:	c0 81       	ld	r28, Z
 40e:	d1 81       	ldd	r29, Z+1	; 0x01
 410:	6c 17       	cp	r22, r28
 412:	7d 07       	cpc	r23, r29
 414:	0c f1       	brlt	.+66     	; 0x458 <measure_velocity+0x56>
 416:	8c 01       	movw	r16, r24
	int temp = *val;
	LCDGotoXY(0, 1);
 418:	61 e0       	ldi	r22, 0x01	; 1
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	3c df       	rcall	.-392    	; 0x296 <LCDGotoXY>
	LCDDispString("***", 3);
 41e:	63 e0       	ldi	r22, 0x03	; 3
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	80 e2       	ldi	r24, 0x20	; 32
 424:	92 e0       	ldi	r25, 0x02	; 2
	int lowest = temp;
	temp = adc_read_single();
 426:	44 df       	rcall	.-376    	; 0x2b0 <LCDDispString>
 428:	80 de       	rcall	.-768    	; 0x12a <adc_read_single>
	while(temp <= lowest){
 42a:	c8 17       	cp	r28, r24
 42c:	d9 07       	cpc	r29, r25
		temp = adc_read_single();
 42e:	44 f0       	brlt	.+16     	; 0x440 <measure_velocity+0x3e>
 430:	7c de       	rcall	.-776    	; 0x12a <adc_read_single>
 432:	8c 17       	cp	r24, r28
 434:	9d 07       	cpc	r25, r29
 436:	0c f4       	brge	.+2      	; 0x43a <measure_velocity+0x38>
 438:	ec 01       	movw	r28, r24
	int temp = *val;
	LCDGotoXY(0, 1);
	LCDDispString("***", 3);
	int lowest = temp;
	temp = adc_read_single();
	while(temp <= lowest){
 43a:	c8 17       	cp	r28, r24
 43c:	d9 07       	cpc	r29, r25
 43e:	c4 f7       	brge	.-16     	; 0x430 <measure_velocity+0x2e>
		temp = adc_read_single();
		if(temp < lowest) lowest = temp;
	}
	*val = lowest;
 440:	f8 01       	movw	r30, r16
 442:	d1 83       	std	Z+1, r29	; 0x01
 444:	c0 83       	st	Z, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 446:	ff ef       	ldi	r31, 0xFF	; 255
 448:	29 e6       	ldi	r18, 0x69	; 105
 44a:	88 e1       	ldi	r24, 0x18	; 24
 44c:	f1 50       	subi	r31, 0x01	; 1
 44e:	20 40       	sbci	r18, 0x00	; 0
 450:	80 40       	sbci	r24, 0x00	; 0
 452:	e1 f7       	brne	.-8      	; 0x44c <measure_velocity+0x4a>
 454:	00 c0       	rjmp	.+0      	; 0x456 <measure_velocity+0x54>
 456:	00 00       	nop
	_delay_ms(500);
	
}
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	08 95       	ret

00000462 <main>:

int main(void){
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	1f 92       	push	r1
 468:	1f 92       	push	r1
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
	char SRAMstring[] = "String in SRAM";
	int i;
	init_adc();
 46e:	52 de       	rcall	.-860    	; 0x114 <init_adc>
	// Initialize the display
	LCDInit();
 470:	d5 de       	rcall	.-598    	; 0x21c <LCDInit>
	LCDDispChar('A');
 472:	81 e4       	ldi	r24, 0x41	; 65
 474:	1b df       	rcall	.-458    	; 0x2ac <LCDDispChar>
	LCDGotoXY(5, 0);
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	85 e0       	ldi	r24, 0x05	; 5
 47a:	0d df       	rcall	.-486    	; 0x296 <LCDGotoXY>
	LCDDispChar('B');
 47c:	82 e4       	ldi	r24, 0x42	; 66
 47e:	16 df       	rcall	.-468    	; 0x2ac <LCDDispChar>
	LCDGotoXY(0, 1);
 480:	61 e0       	ldi	r22, 0x01	; 1
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	08 df       	rcall	.-496    	; 0x296 <LCDGotoXY>
	LCDDispChar('C');
 486:	83 e4       	ldi	r24, 0x43	; 67
 488:	11 df       	rcall	.-478    	; 0x2ac <LCDDispChar>
 48a:	61 e0       	ldi	r22, 0x01	; 1
	LCDGotoXY(8, 1);
 48c:	88 e0       	ldi	r24, 0x08	; 8
 48e:	03 df       	rcall	.-506    	; 0x296 <LCDGotoXY>
	LCDDispString("Hello", 5);
 490:	65 e0       	ldi	r22, 0x05	; 5
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	84 e2       	ldi	r24, 0x24	; 36
 496:	92 e0       	ldi	r25, 0x02	; 2
	LCDClear();
 498:	0b df       	rcall	.-490    	; 0x2b0 <LCDDispString>
 49a:	f4 de       	rcall	.-536    	; 0x284 <LCDClear>
	int val;
	val = adc_read_single();
 49c:	46 de       	rcall	.-884    	; 0x12a <adc_read_single>
 49e:	1e df       	rcall	.-452    	; 0x2dc <LCDDispInteger>
	LCDDispInteger(val);
 4a0:	ad df       	rcall	.-166    	; 0x3fc <LCDCursorRight>
 4a2:	60 e0       	ldi	r22, 0x00	; 0
	LCDCursorRight();
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	9b df       	rcall	.-202    	; 0x3de <LCDOnOffControl>
	int it = 0;
	LCDOnOffControl(1, 0);
 4a8:	40 de       	rcall	.-896    	; 0x12a <adc_read_single>
 4aa:	9a 83       	std	Y+2, r25	; 0x02
 4ac:	89 83       	std	Y+1, r24	; 0x01
	char print = 0;
	while(1){
		int val = adc_read_single();
 4ae:	88 3e       	cpi	r24, 0xE8	; 232
 4b0:	93 40       	sbci	r25, 0x03	; 3
 4b2:	d4 f7       	brge	.-12     	; 0x4a8 <main+0x46>
		
		if(val < 1000){
 4b4:	68 ee       	ldi	r22, 0xE8	; 232
 4b6:	73 e0       	ldi	r23, 0x03	; 3
			print = 1;
			int* p = &val;
			measure_velocity(p, 1000);
 4b8:	ce 01       	movw	r24, r28
 4ba:	01 96       	adiw	r24, 0x01	; 1
 4bc:	a2 df       	rcall	.-188    	; 0x402 <measure_velocity>
 4be:	89 81       	ldd	r24, Y+1	; 0x01
 4c0:	9a 81       	ldd	r25, Y+2	; 0x02
 4c2:	88 3e       	cpi	r24, 0xE8	; 232
		}
		
		if(val < 1000){
 4c4:	93 40       	sbci	r25, 0x03	; 3
 4c6:	84 f7       	brge	.-32     	; 0x4a8 <main+0x46>
 4c8:	dd de       	rcall	.-582    	; 0x284 <LCDClear>
 4ca:	89 81       	ldd	r24, Y+1	; 0x01
 4cc:	9a 81       	ldd	r25, Y+2	; 0x02
			LCDClear();
 4ce:	06 df       	rcall	.-500    	; 0x2dc <LCDDispInteger>
 4d0:	95 df       	rcall	.-214    	; 0x3fc <LCDCursorRight>
			LCDDispInteger(val);
 4d2:	ea cf       	rjmp	.-44     	; 0x4a8 <main+0x46>

000004d4 <__divmodhi4>:
 4d4:	97 fb       	bst	r25, 7
 4d6:	07 2e       	mov	r0, r23
 4d8:	16 f4       	brtc	.+4      	; 0x4de <__divmodhi4+0xa>
			LCDCursorRight();
 4da:	00 94       	com	r0
 4dc:	06 d0       	rcall	.+12     	; 0x4ea <__divmodhi4_neg1>
			print = 0;
		}
	}
 4de:	77 fd       	sbrc	r23, 7
 4e0:	08 d0       	rcall	.+16     	; 0x4f2 <__divmodhi4_neg2>
 4e2:	0b d0       	rcall	.+22     	; 0x4fa <__udivmodhi4>
 4e4:	07 fc       	sbrc	r0, 7
 4e6:	05 d0       	rcall	.+10     	; 0x4f2 <__divmodhi4_neg2>
 4e8:	3e f4       	brtc	.+14     	; 0x4f8 <__divmodhi4_exit>

000004ea <__divmodhi4_neg1>:
 4ea:	90 95       	com	r25
 4ec:	81 95       	neg	r24
 4ee:	9f 4f       	sbci	r25, 0xFF	; 255
 4f0:	08 95       	ret

000004f2 <__divmodhi4_neg2>:
 4f2:	70 95       	com	r23
 4f4:	61 95       	neg	r22
 4f6:	7f 4f       	sbci	r23, 0xFF	; 255

000004f8 <__divmodhi4_exit>:
 4f8:	08 95       	ret

000004fa <__udivmodhi4>:
 4fa:	aa 1b       	sub	r26, r26
 4fc:	bb 1b       	sub	r27, r27
 4fe:	51 e1       	ldi	r21, 0x11	; 17
 500:	07 c0       	rjmp	.+14     	; 0x510 <__udivmodhi4_ep>

00000502 <__udivmodhi4_loop>:
 502:	aa 1f       	adc	r26, r26
 504:	bb 1f       	adc	r27, r27
 506:	a6 17       	cp	r26, r22
 508:	b7 07       	cpc	r27, r23
 50a:	10 f0       	brcs	.+4      	; 0x510 <__udivmodhi4_ep>
 50c:	a6 1b       	sub	r26, r22
 50e:	b7 0b       	sbc	r27, r23

00000510 <__udivmodhi4_ep>:
 510:	88 1f       	adc	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	5a 95       	dec	r21
 516:	a9 f7       	brne	.-22     	; 0x502 <__udivmodhi4_loop>
 518:	80 95       	com	r24
 51a:	90 95       	com	r25
 51c:	bc 01       	movw	r22, r24
 51e:	cd 01       	movw	r24, r26
 520:	08 95       	ret

00000522 <_exit>:
 522:	f8 94       	cli

00000524 <__stop_program>:
 524:	ff cf       	rjmp	.-2      	; 0x524 <__stop_program>
